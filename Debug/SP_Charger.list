
SP_Charger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004080  08004080  00005080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040ec  080040ec  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080040ec  080040ec  000050ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040f4  080040f4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f4  080040f4  000050f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040f8  080040f8  000050f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  08004108  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004108  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112ee  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0d  00000000  00000000  00017322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00019f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7b  00000000  00000000  0001af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000144a6  00000000  00000000  0001bbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e0d  00000000  00000000  00030051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074cbb  00000000  00000000  00044e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9b19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  000b9b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000bd450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004068 	.word	0x08004068

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004068 	.word	0x08004068

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ae:	003b      	movs	r3, r7
 80004b0:	0018      	movs	r0, r3
 80004b2:	2308      	movs	r3, #8
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f003 fdaa 	bl	8004010 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004bc:	4b51      	ldr	r3, [pc, #324]	@ (8000604 <MX_ADC_Init+0x15c>)
 80004be:	4a52      	ldr	r2, [pc, #328]	@ (8000608 <MX_ADC_Init+0x160>)
 80004c0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80004c2:	4b50      	ldr	r3, [pc, #320]	@ (8000604 <MX_ADC_Init+0x15c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004c8:	4b4e      	ldr	r3, [pc, #312]	@ (8000604 <MX_ADC_Init+0x15c>)
 80004ca:	22c0      	movs	r2, #192	@ 0xc0
 80004cc:	0612      	lsls	r2, r2, #24
 80004ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004d0:	4b4c      	ldr	r3, [pc, #304]	@ (8000604 <MX_ADC_Init+0x15c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004d6:	4b4b      	ldr	r3, [pc, #300]	@ (8000604 <MX_ADC_Init+0x15c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004dc:	4b49      	ldr	r3, [pc, #292]	@ (8000604 <MX_ADC_Init+0x15c>)
 80004de:	2201      	movs	r2, #1
 80004e0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e2:	4b48      	ldr	r3, [pc, #288]	@ (8000604 <MX_ADC_Init+0x15c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004e8:	4b46      	ldr	r3, [pc, #280]	@ (8000604 <MX_ADC_Init+0x15c>)
 80004ea:	2220      	movs	r2, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004f0:	4b44      	ldr	r3, [pc, #272]	@ (8000604 <MX_ADC_Init+0x15c>)
 80004f2:	2221      	movs	r2, #33	@ 0x21
 80004f4:	2100      	movs	r1, #0
 80004f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f8:	4b42      	ldr	r3, [pc, #264]	@ (8000604 <MX_ADC_Init+0x15c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fe:	4b41      	ldr	r3, [pc, #260]	@ (8000604 <MX_ADC_Init+0x15c>)
 8000500:	22c2      	movs	r2, #194	@ 0xc2
 8000502:	32ff      	adds	r2, #255	@ 0xff
 8000504:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000506:	4b3f      	ldr	r3, [pc, #252]	@ (8000604 <MX_ADC_Init+0x15c>)
 8000508:	222c      	movs	r2, #44	@ 0x2c
 800050a:	2100      	movs	r1, #0
 800050c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050e:	4b3d      	ldr	r3, [pc, #244]	@ (8000604 <MX_ADC_Init+0x15c>)
 8000510:	2204      	movs	r2, #4
 8000512:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000514:	4b3b      	ldr	r3, [pc, #236]	@ (8000604 <MX_ADC_Init+0x15c>)
 8000516:	2200      	movs	r2, #0
 8000518:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800051a:	4b3a      	ldr	r3, [pc, #232]	@ (8000604 <MX_ADC_Init+0x15c>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000520:	4b38      	ldr	r3, [pc, #224]	@ (8000604 <MX_ADC_Init+0x15c>)
 8000522:	2201      	movs	r2, #1
 8000524:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000526:	4b37      	ldr	r3, [pc, #220]	@ (8000604 <MX_ADC_Init+0x15c>)
 8000528:	2200      	movs	r2, #0
 800052a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800052c:	4b35      	ldr	r3, [pc, #212]	@ (8000604 <MX_ADC_Init+0x15c>)
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fd64 	bl	8000ffc <HAL_ADC_Init>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000538:	f000 fa3e 	bl	80009b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800053c:	003b      	movs	r3, r7
 800053e:	2201      	movs	r2, #1
 8000540:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000542:	003b      	movs	r3, r7
 8000544:	2280      	movs	r2, #128	@ 0x80
 8000546:	0152      	lsls	r2, r2, #5
 8000548:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800054a:	003a      	movs	r2, r7
 800054c:	4b2d      	ldr	r3, [pc, #180]	@ (8000604 <MX_ADC_Init+0x15c>)
 800054e:	0011      	movs	r1, r2
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fec7 	bl	80012e4 <HAL_ADC_ConfigChannel>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800055a:	f000 fa2d 	bl	80009b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800055e:	003b      	movs	r3, r7
 8000560:	4a2a      	ldr	r2, [pc, #168]	@ (800060c <MX_ADC_Init+0x164>)
 8000562:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000564:	003a      	movs	r2, r7
 8000566:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <MX_ADC_Init+0x15c>)
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f000 feba 	bl	80012e4 <HAL_ADC_ConfigChannel>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000574:	f000 fa20 	bl	80009b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000578:	003b      	movs	r3, r7
 800057a:	4a25      	ldr	r2, [pc, #148]	@ (8000610 <MX_ADC_Init+0x168>)
 800057c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800057e:	003a      	movs	r2, r7
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <MX_ADC_Init+0x15c>)
 8000582:	0011      	movs	r1, r2
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fead 	bl	80012e4 <HAL_ADC_ConfigChannel>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800058e:	f000 fa13 	bl	80009b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000592:	003b      	movs	r3, r7
 8000594:	4a1f      	ldr	r2, [pc, #124]	@ (8000614 <MX_ADC_Init+0x16c>)
 8000596:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000598:	003a      	movs	r2, r7
 800059a:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <MX_ADC_Init+0x15c>)
 800059c:	0011      	movs	r1, r2
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fea0 	bl	80012e4 <HAL_ADC_ConfigChannel>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80005a8:	f000 fa06 	bl	80009b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005ac:	003b      	movs	r3, r7
 80005ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000618 <MX_ADC_Init+0x170>)
 80005b0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005b2:	003a      	movs	r2, r7
 80005b4:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <MX_ADC_Init+0x15c>)
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 fe93 	bl	80012e4 <HAL_ADC_ConfigChannel>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 80005c2:	f000 f9f9 	bl	80009b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005c6:	003b      	movs	r3, r7
 80005c8:	4a14      	ldr	r2, [pc, #80]	@ (800061c <MX_ADC_Init+0x174>)
 80005ca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005cc:	003a      	movs	r2, r7
 80005ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <MX_ADC_Init+0x15c>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fe86 	bl	80012e4 <HAL_ADC_ConfigChannel>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC_Init+0x138>
  {
    Error_Handler();
 80005dc:	f000 f9ec 	bl	80009b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005e0:	003b      	movs	r3, r7
 80005e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000620 <MX_ADC_Init+0x178>)
 80005e4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005e6:	003a      	movs	r2, r7
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_ADC_Init+0x15c>)
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fe79 	bl	80012e4 <HAL_ADC_ConfigChannel>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC_Init+0x152>
  {
    Error_Handler();
 80005f6:	f000 f9df 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b002      	add	sp, #8
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	20000028 	.word	0x20000028
 8000608:	40012400 	.word	0x40012400
 800060c:	04000002 	.word	0x04000002
 8000610:	0c000008 	.word	0x0c000008
 8000614:	10000010 	.word	0x10000010
 8000618:	14000020 	.word	0x14000020
 800061c:	1c000080 	.word	0x1c000080
 8000620:	20000100 	.word	0x20000100

08000624 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b08b      	sub	sp, #44	@ 0x2c
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	2414      	movs	r4, #20
 800062e:	193b      	adds	r3, r7, r4
 8000630:	0018      	movs	r0, r3
 8000632:	2314      	movs	r3, #20
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f003 fcea 	bl	8004010 <memset>
  if(adcHandle->Instance==ADC1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a22      	ldr	r2, [pc, #136]	@ (80006cc <HAL_ADC_MspInit+0xa8>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d13d      	bne.n	80006c2 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000646:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <HAL_ADC_MspInit+0xac>)
 8000648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064a:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <HAL_ADC_MspInit+0xac>)
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	0089      	lsls	r1, r1, #2
 8000650:	430a      	orrs	r2, r1
 8000652:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <HAL_ADC_MspInit+0xac>)
 8000656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000658:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <HAL_ADC_MspInit+0xac>)
 800065a:	2101      	movs	r1, #1
 800065c:	430a      	orrs	r2, r1
 800065e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000660:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <HAL_ADC_MspInit+0xac>)
 8000662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000664:	2201      	movs	r2, #1
 8000666:	4013      	ands	r3, r2
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <HAL_ADC_MspInit+0xac>)
 800066e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000670:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <HAL_ADC_MspInit+0xac>)
 8000672:	2102      	movs	r1, #2
 8000674:	430a      	orrs	r2, r1
 8000676:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <HAL_ADC_MspInit+0xac>)
 800067a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067c:	2202      	movs	r2, #2
 800067e:	4013      	ands	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000684:	193b      	adds	r3, r7, r4
 8000686:	22bb      	movs	r2, #187	@ 0xbb
 8000688:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2203      	movs	r2, #3
 800068e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	193a      	adds	r2, r7, r4
 8000698:	23a0      	movs	r3, #160	@ 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 f82c 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2201      	movs	r2, #1
 80006a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2203      	movs	r2, #3
 80006ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	4a06      	ldr	r2, [pc, #24]	@ (80006d4 <HAL_ADC_MspInit+0xb0>)
 80006ba:	0019      	movs	r1, r3
 80006bc:	0010      	movs	r0, r2
 80006be:	f001 f81d 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b00b      	add	sp, #44	@ 0x2c
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	40012400 	.word	0x40012400
 80006d0:	40021000 	.word	0x40021000
 80006d4:	50000400 	.word	0x50000400

080006d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b089      	sub	sp, #36	@ 0x24
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	240c      	movs	r4, #12
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	0018      	movs	r0, r3
 80006e4:	2314      	movs	r3, #20
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f003 fc91 	bl	8004010 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <MX_GPIO_Init+0x98>)
 80006f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <MX_GPIO_Init+0x98>)
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	430a      	orrs	r2, r1
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <MX_GPIO_Init+0x98>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_GPIO_Init+0x98>)
 8000708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <MX_GPIO_Init+0x98>)
 800070c:	2101      	movs	r1, #1
 800070e:	430a      	orrs	r2, r1
 8000710:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_GPIO_Init+0x98>)
 8000714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000716:	2201      	movs	r2, #1
 8000718:	4013      	ands	r3, r2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_GPIO_Init+0x98>)
 8000720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_GPIO_Init+0x98>)
 8000724:	2102      	movs	r1, #2
 8000726:	430a      	orrs	r2, r1
 8000728:	62da      	str	r2, [r3, #44]	@ 0x2c
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_GPIO_Init+0x98>)
 800072c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072e:	2202      	movs	r2, #2
 8000730:	4013      	ands	r3, r2
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, K1_Pin|K2_Pin, GPIO_PIN_RESET);
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_GPIO_Init+0x9c>)
 8000738:	2200      	movs	r2, #0
 800073a:	2106      	movs	r1, #6
 800073c:	0018      	movs	r0, r3
 800073e:	f001 f953 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : K1_Pin K2_Pin */
  GPIO_InitStruct.Pin = K1_Pin|K2_Pin;
 8000742:	0021      	movs	r1, r4
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2206      	movs	r2, #6
 8000748:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2201      	movs	r2, #1
 800074e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	187b      	adds	r3, r7, r1
 800075e:	4a05      	ldr	r2, [pc, #20]	@ (8000774 <MX_GPIO_Init+0x9c>)
 8000760:	0019      	movs	r1, r3
 8000762:	0010      	movs	r0, r2
 8000764:	f000 ffca 	bl	80016fc <HAL_GPIO_Init>

}
 8000768:	46c0      	nop			@ (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b009      	add	sp, #36	@ 0x24
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	40021000 	.word	0x40021000
 8000774:	50000400 	.word	0x50000400

08000778 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_I2C1_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	@ (80007f0 <MX_I2C1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_I2C1_Init+0x74>)
 8000784:	4a1b      	ldr	r2, [pc, #108]	@ (80007f4 <MX_I2C1_Init+0x7c>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_I2C1_Init+0x74>)
 8000790:	2201      	movs	r2, #1
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 f935 	bl	8001a24 <HAL_I2C_Init>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007be:	f000 f8fb 	bl	80009b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c2:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 f9c2 	bl	8001b50 <HAL_I2CEx_ConfigAnalogFilter>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 f8f2 	bl	80009b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <MX_I2C1_Init+0x74>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f001 fa05 	bl	8001be8 <HAL_I2CEx_ConfigDigitalFilter>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 f8e9 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000084 	.word	0x20000084
 80007f0:	40005400 	.word	0x40005400
 80007f4:	0010020a 	.word	0x0010020a

080007f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b089      	sub	sp, #36	@ 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	240c      	movs	r4, #12
 8000802:	193b      	adds	r3, r7, r4
 8000804:	0018      	movs	r0, r3
 8000806:	2314      	movs	r3, #20
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f003 fc00 	bl	8004010 <memset>
  if(i2cHandle->Instance==I2C1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a18      	ldr	r2, [pc, #96]	@ (8000878 <HAL_I2C_MspInit+0x80>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d129      	bne.n	800086e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b18      	ldr	r3, [pc, #96]	@ (800087c <HAL_I2C_MspInit+0x84>)
 800081c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <HAL_I2C_MspInit+0x84>)
 8000820:	2102      	movs	r1, #2
 8000822:	430a      	orrs	r2, r1
 8000824:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <HAL_I2C_MspInit+0x84>)
 8000828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800082a:	2202      	movs	r2, #2
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	22c0      	movs	r2, #192	@ 0xc0
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083a:	0021      	movs	r1, r4
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2212      	movs	r2, #18
 8000840:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2203      	movs	r2, #3
 800084c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2204      	movs	r2, #4
 8000852:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	187b      	adds	r3, r7, r1
 8000856:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <HAL_I2C_MspInit+0x88>)
 8000858:	0019      	movs	r1, r3
 800085a:	0010      	movs	r0, r2
 800085c:	f000 ff4e 	bl	80016fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_I2C_MspInit+0x84>)
 8000862:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000864:	4b05      	ldr	r3, [pc, #20]	@ (800087c <HAL_I2C_MspInit+0x84>)
 8000866:	2180      	movs	r1, #128	@ 0x80
 8000868:	0389      	lsls	r1, r1, #14
 800086a:	430a      	orrs	r2, r1
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b009      	add	sp, #36	@ 0x24
 8000874:	bd90      	pop	{r4, r7, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	40005400 	.word	0x40005400
 800087c:	40021000 	.word	0x40021000
 8000880:	50000400 	.word	0x50000400

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f000 fb48 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f810 	bl	80008b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f7ff ff22 	bl	80006d8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000894:	f7ff fe08 	bl	80004a8 <MX_ADC_Init>
  MX_I2C1_Init();
 8000898:	f7ff ff6e 	bl	8000778 <MX_I2C1_Init>
  MX_TIM2_Init();
 800089c:	f000 f8d2 	bl	8000a44 <MX_TIM2_Init>
  MX_TIM21_Init();
 80008a0:	f000 f93a 	bl	8000b18 <MX_TIM21_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 fa30 	bl	8000d08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008a8:	f000 fa5e 	bl	8000d68 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	e7fd      	b.n	80008ac <main+0x28>

080008b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b09b      	sub	sp, #108	@ 0x6c
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	2434      	movs	r4, #52	@ 0x34
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	0018      	movs	r0, r3
 80008bc:	2334      	movs	r3, #52	@ 0x34
 80008be:	001a      	movs	r2, r3
 80008c0:	2100      	movs	r1, #0
 80008c2:	f003 fba5 	bl	8004010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c6:	2320      	movs	r3, #32
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	0018      	movs	r0, r3
 80008cc:	2314      	movs	r3, #20
 80008ce:	001a      	movs	r2, r3
 80008d0:	2100      	movs	r1, #0
 80008d2:	f003 fb9d 	bl	8004010 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	0018      	movs	r0, r3
 80008da:	231c      	movs	r3, #28
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f003 fb96 	bl	8004010 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	4b32      	ldr	r3, [pc, #200]	@ (80009b0 <_Z18SystemClock_Configv+0x100>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a32      	ldr	r2, [pc, #200]	@ (80009b4 <_Z18SystemClock_Configv+0x104>)
 80008ea:	401a      	ands	r2, r3
 80008ec:	4b30      	ldr	r3, [pc, #192]	@ (80009b0 <_Z18SystemClock_Configv+0x100>)
 80008ee:	2180      	movs	r1, #128	@ 0x80
 80008f0:	0109      	lsls	r1, r1, #4
 80008f2:	430a      	orrs	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f6:	0021      	movs	r1, r4
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	0252      	lsls	r2, r2, #9
 8000904:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2202      	movs	r2, #2
 800090a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2280      	movs	r2, #128	@ 0x80
 8000910:	0252      	lsls	r2, r2, #9
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	0412      	lsls	r2, r2, #16
 8000920:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	187b      	adds	r3, r7, r1
 8000924:	0018      	movs	r0, r3
 8000926:	f001 f9ab 	bl	8001c80 <HAL_RCC_OscConfig>
 800092a:	0003      	movs	r3, r0
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4193      	sbcs	r3, r2
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8000936:	f000 f83f 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	2120      	movs	r1, #32
 800093c:	187b      	adds	r3, r7, r1
 800093e:	220f      	movs	r2, #15
 8000940:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2203      	movs	r2, #3
 8000946:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	22a0      	movs	r2, #160	@ 0xa0
 800094c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2100      	movs	r1, #0
 800095e:	0018      	movs	r0, r3
 8000960:	f001 fcf8 	bl	8002354 <HAL_RCC_ClockConfig>
 8000964:	0003      	movs	r3, r0
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	4193      	sbcs	r3, r2
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8000970:	f000 f822 	bl	80009b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	220b      	movs	r2, #11
 8000978:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2201      	movs	r2, #1
 800097e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2204      	movs	r2, #4
 8000984:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	0152      	lsls	r2, r2, #5
 800098c:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	0018      	movs	r0, r3
 8000992:	f001 ff03 	bl	800279c <HAL_RCCEx_PeriphCLKConfig>
 8000996:	0003      	movs	r3, r0
 8000998:	1e5a      	subs	r2, r3, #1
 800099a:	4193      	sbcs	r3, r2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <_Z18SystemClock_Configv+0xf6>
  {
    Error_Handler();
 80009a2:	f000 f809 	bl	80009b8 <Error_Handler>
  }
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b01b      	add	sp, #108	@ 0x6c
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	40007000 	.word	0x40007000
 80009b4:	ffffe7ff 	.word	0xffffe7ff

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c8:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <HAL_MspInit+0x24>)
 80009ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x24>)
 80009ce:	2101      	movs	r1, #1
 80009d0:	430a      	orrs	r2, r1
 80009d2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d4:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <HAL_MspInit+0x24>)
 80009d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009d8:	4b03      	ldr	r3, [pc, #12]	@ (80009e8 <HAL_MspInit+0x24>)
 80009da:	2180      	movs	r1, #128	@ 0x80
 80009dc:	0549      	lsls	r1, r1, #21
 80009de:	430a      	orrs	r2, r1
 80009e0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 fad6 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <USART1_IRQHandler+0x14>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 fafc 	bl	8003024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	20000158 	.word	0x20000158

08000a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2308      	movs	r3, #8
 8000a52:	001a      	movs	r2, r3
 8000a54:	2100      	movs	r1, #0
 8000a56:	f003 fadb 	bl	8004010 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	2310      	movs	r3, #16
 8000a60:	001a      	movs	r2, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	f003 fad4 	bl	8004010 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a68:	4b29      	ldr	r3, [pc, #164]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	05d2      	lsls	r2, r2, #23
 8000a6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a70:	4b27      	ldr	r3, [pc, #156]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a7c:	4b24      	ldr	r3, [pc, #144]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000a7e:	4a25      	ldr	r2, [pc, #148]	@ (8000b14 <MX_TIM2_Init+0xd0>)
 8000a80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a88:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a8e:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 ffbd 	bl	8002a10 <HAL_TIM_PWM_Init>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a9a:	f7ff ff8d 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aac:	187a      	adds	r2, r7, r1
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 fa0a 	bl	8002ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000abc:	f7ff ff7c 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	2260      	movs	r2, #96	@ 0x60
 8000ac4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000acc:	003b      	movs	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad2:	003b      	movs	r3, r7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad8:	0039      	movs	r1, r7
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000adc:	2208      	movs	r2, #8
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 ffd6 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000ae8:	f7ff ff66 	bl	80009b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aec:	0039      	movs	r1, r7
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000af0:	220c      	movs	r2, #12
 8000af2:	0018      	movs	r0, r3
 8000af4:	f001 ffcc 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000afc:	f7ff ff5c 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b00:	4b03      	ldr	r3, [pc, #12]	@ (8000b10 <MX_TIM2_Init+0xcc>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 f898 	bl	8000c38 <HAL_TIM_MspPostInit>

}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b006      	add	sp, #24
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000d8 	.word	0x200000d8
 8000b14:	0000ffff 	.word	0x0000ffff

08000b18 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1e:	2310      	movs	r3, #16
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	0018      	movs	r0, r3
 8000b24:	2308      	movs	r3, #8
 8000b26:	001a      	movs	r2, r3
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f003 fa71 	bl	8004010 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2e:	003b      	movs	r3, r7
 8000b30:	0018      	movs	r0, r3
 8000b32:	2310      	movs	r3, #16
 8000b34:	001a      	movs	r2, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	f003 fa6a 	bl	8004010 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000b3c:	4b29      	ldr	r3, [pc, #164]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000be8 <MX_TIM21_Init+0xd0>)
 8000b40:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8000b42:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b48:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000b4e:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000b50:	4a26      	ldr	r2, [pc, #152]	@ (8000bec <MX_TIM21_Init+0xd4>)
 8000b52:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8000b60:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f001 ff54 	bl	8002a10 <HAL_TIM_PWM_Init>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000b6c:	f7ff ff24 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2110      	movs	r1, #16
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000b7e:	187a      	adds	r2, r7, r1
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f002 f9a1 	bl	8002ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000b8a:	1e03      	subs	r3, r0, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 8000b8e:	f7ff ff13 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b92:	003b      	movs	r3, r7
 8000b94:	2260      	movs	r2, #96	@ 0x60
 8000b96:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b98:	003b      	movs	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba4:	003b      	movs	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000baa:	0039      	movs	r1, r7
 8000bac:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 ff6d 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8000bba:	f7ff fefd 	bl	80009b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bbe:	0039      	movs	r1, r7
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f001 ff63 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM21_Init+0xba>
  {
    Error_Handler();
 8000bce:	f7ff fef3 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 8000bd2:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <MX_TIM21_Init+0xcc>)
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 f82f 	bl	8000c38 <HAL_TIM_MspPostInit>

}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b006      	add	sp, #24
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	20000118 	.word	0x20000118
 8000be8:	40010800 	.word	0x40010800
 8000bec:	0000ffff 	.word	0x0000ffff

08000bf0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	05db      	lsls	r3, r3, #23
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d106      	bne.n	8000c12 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c04:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_TIM_PWM_MspInit+0x40>)
 8000c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <HAL_TIM_PWM_MspInit+0x40>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM21_CLK_ENABLE();
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8000c10:	e00a      	b.n	8000c28 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM21)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <HAL_TIM_PWM_MspInit+0x44>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d105      	bne.n	8000c28 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <HAL_TIM_PWM_MspInit+0x40>)
 8000c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <HAL_TIM_PWM_MspInit+0x40>)
 8000c22:	2104      	movs	r1, #4
 8000c24:	430a      	orrs	r2, r1
 8000c26:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800

08000c38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b08b      	sub	sp, #44	@ 0x2c
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	2414      	movs	r4, #20
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	0018      	movs	r0, r3
 8000c46:	2314      	movs	r3, #20
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f003 f9e0 	bl	8004010 <memset>
  if(timHandle->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2380      	movs	r3, #128	@ 0x80
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d123      	bne.n	8000ca4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <HAL_TIM_MspPostInit+0xc4>)
 8000c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c60:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <HAL_TIM_MspPostInit+0xc4>)
 8000c62:	2102      	movs	r1, #2
 8000c64:	430a      	orrs	r2, r1
 8000c66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c68:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <HAL_TIM_MspPostInit+0xc4>)
 8000c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	22c0      	movs	r2, #192	@ 0xc0
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	0021      	movs	r1, r4
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2202      	movs	r2, #2
 8000c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2202      	movs	r2, #2
 8000c94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	4a19      	ldr	r2, [pc, #100]	@ (8000d00 <HAL_TIM_MspPostInit+0xc8>)
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f000 fd2d 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }

}
 8000ca2:	e027      	b.n	8000cf4 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM21)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a16      	ldr	r2, [pc, #88]	@ (8000d04 <HAL_TIM_MspPostInit+0xcc>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d122      	bne.n	8000cf4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <HAL_TIM_MspPostInit+0xc4>)
 8000cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_TIM_MspPostInit+0xc4>)
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <HAL_TIM_MspPostInit+0xc4>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000cc6:	2114      	movs	r1, #20
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	22c0      	movs	r2, #192	@ 0xc0
 8000ccc:	01d2      	lsls	r2, r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2206      	movs	r2, #6
 8000ce6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <HAL_TIM_MspPostInit+0xc8>)
 8000cec:	0019      	movs	r1, r3
 8000cee:	0010      	movs	r0, r2
 8000cf0:	f000 fd04 	bl	80016fc <HAL_GPIO_Init>
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b00b      	add	sp, #44	@ 0x2c
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	50000400 	.word	0x50000400
 8000d04:	40010800 	.word	0x40010800

08000d08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d0e:	4a15      	ldr	r2, [pc, #84]	@ (8000d64 <MX_USART1_UART_Init+0x5c>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d12:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d14:	22e1      	movs	r2, #225	@ 0xe1
 8000d16:	0252      	lsls	r2, r2, #9
 8000d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4a:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <MX_USART1_UART_Init+0x58>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f002 f915 	bl	8002f7c <HAL_UART_Init>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d56:	f7ff fe2f 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000158 	.word	0x20000158
 8000d64:	40013800 	.word	0x40013800

08000d68 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d6e:	4a15      	ldr	r2, [pc, #84]	@ (8000dc4 <MX_USART2_UART_Init+0x5c>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d74:	22e1      	movs	r2, #225	@ 0xe1
 8000d76:	0252      	lsls	r2, r2, #9
 8000d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000daa:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f002 f8e5 	bl	8002f7c <HAL_UART_Init>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000db6:	f7ff fdff 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200001e0 	.word	0x200001e0
 8000dc4:	40004400 	.word	0x40004400

08000dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b08b      	sub	sp, #44	@ 0x2c
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	2414      	movs	r4, #20
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	2314      	movs	r3, #20
 8000dd8:	001a      	movs	r2, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f003 f918 	bl	8004010 <memset>
  if(uartHandle->Instance==USART1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a33      	ldr	r2, [pc, #204]	@ (8000eb4 <HAL_UART_MspInit+0xec>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d131      	bne.n	8000e4e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dea:	4b33      	ldr	r3, [pc, #204]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	4b32      	ldr	r3, [pc, #200]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000df0:	2180      	movs	r1, #128	@ 0x80
 8000df2:	01c9      	lsls	r1, r1, #7
 8000df4:	430a      	orrs	r2, r1
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000dfe:	2102      	movs	r1, #2
 8000e00:	430a      	orrs	r2, r1
 8000e02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e04:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e08:	2202      	movs	r2, #2
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e10:	0021      	movs	r1, r4
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	22c0      	movs	r2, #192	@ 0xc0
 8000e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2203      	movs	r2, #3
 8000e28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	4a22      	ldr	r2, [pc, #136]	@ (8000ebc <HAL_UART_MspInit+0xf4>)
 8000e34:	0019      	movs	r1, r3
 8000e36:	0010      	movs	r0, r2
 8000e38:	f000 fc60 	bl	80016fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	201b      	movs	r0, #27
 8000e42:	f000 fba1 	bl	8001588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e46:	201b      	movs	r0, #27
 8000e48:	f000 fbb3 	bl	80015b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e4c:	e02e      	b.n	8000eac <HAL_UART_MspInit+0xe4>
  else if(uartHandle->Instance==USART2)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec0 <HAL_UART_MspInit+0xf8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d129      	bne.n	8000eac <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000e5e:	2180      	movs	r1, #128	@ 0x80
 8000e60:	0289      	lsls	r1, r1, #10
 8000e62:	430a      	orrs	r2, r1
 8000e64:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <HAL_UART_MspInit+0xf0>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e76:	2201      	movs	r2, #1
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000e7e:	2114      	movs	r1, #20
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	4a10      	ldr	r2, [pc, #64]	@ (8000ec4 <HAL_UART_MspInit+0xfc>)
 8000e84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2202      	movs	r2, #2
 8000e8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2203      	movs	r2, #3
 8000e96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	187a      	adds	r2, r7, r1
 8000ea0:	23a0      	movs	r3, #160	@ 0xa0
 8000ea2:	05db      	lsls	r3, r3, #23
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 fc28 	bl	80016fc <HAL_GPIO_Init>
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b00b      	add	sp, #44	@ 0x2c
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	40013800 	.word	0x40013800
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	50000400 	.word	0x50000400
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	00008004 	.word	0x00008004

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ec8:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000eca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ecc:	f7ff fdb4 	bl	8000a38 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	@ (8000f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <LoopForever+0xe>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f14 <LoopForever+0x16>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f003 f893 	bl	8004020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fcc3 	bl	8000884 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
   ldr   r0, =_estack
 8000f00:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f0c:	080040fc 	.word	0x080040fc
  ldr r2, =_sbss
 8000f10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f14:	2000026c 	.word	0x2000026c

08000f18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_COMP_IRQHandler>
	...

08000f1c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <HAL_Init+0x3c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_Init+0x3c>)
 8000f2e:	2140      	movs	r1, #64	@ 0x40
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f811 	bl	8000f5c <HAL_InitTick>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e001      	b.n	8000f4a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f46:	f7ff fd3d 	bl	80009c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_InitTick+0x5c>)
 8000f66:	681c      	ldr	r4, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <HAL_InitTick+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	23fa      	movs	r3, #250	@ 0xfa
 8000f70:	0098      	lsls	r0, r3, #2
 8000f72:	f7ff f8c9 	bl	8000108 <__udivsi3>
 8000f76:	0003      	movs	r3, r0
 8000f78:	0019      	movs	r1, r3
 8000f7a:	0020      	movs	r0, r4
 8000f7c:	f7ff f8c4 	bl	8000108 <__udivsi3>
 8000f80:	0003      	movs	r3, r0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 fb25 	bl	80015d2 <HAL_SYSTICK_Config>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e00f      	b.n	8000fb0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d80b      	bhi.n	8000fae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 faf2 	bl	8001588 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_InitTick+0x64>)
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b003      	add	sp, #12
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <HAL_IncTick+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	18d2      	adds	r2, r2, r3
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <HAL_IncTick+0x20>)
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000268 	.word	0x20000268

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b02      	ldr	r3, [pc, #8]	@ (8000ff8 <HAL_GetTick+0x10>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	20000268 	.word	0x20000268

08000ffc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e159      	b.n	80012c2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10a      	bne.n	800102c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2250      	movs	r2, #80	@ 0x50
 8001020:	2100      	movs	r1, #0
 8001022:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff fafc 	bl	8000624 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001030:	2210      	movs	r2, #16
 8001032:	4013      	ands	r3, r2
 8001034:	2b10      	cmp	r3, #16
 8001036:	d005      	beq.n	8001044 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2204      	movs	r2, #4
 8001040:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001042:	d00b      	beq.n	800105c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001048:	2210      	movs	r2, #16
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2250      	movs	r2, #80	@ 0x50
 8001054:	2100      	movs	r1, #0
 8001056:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e132      	b.n	80012c2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001060:	4a9a      	ldr	r2, [pc, #616]	@ (80012cc <HAL_ADC_Init+0x2d0>)
 8001062:	4013      	ands	r3, r2
 8001064:	2202      	movs	r2, #2
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2203      	movs	r2, #3
 8001074:	4013      	ands	r3, r2
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <HAL_ADC_Init+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <HAL_ADC_Init+0x90>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_ADC_Init+0x92>
 800108c:	2300      	movs	r3, #0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d149      	bne.n	8001126 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	23c0      	movs	r3, #192	@ 0xc0
 8001098:	061b      	lsls	r3, r3, #24
 800109a:	429a      	cmp	r2, r3
 800109c:	d00b      	beq.n	80010b6 <HAL_ADC_Init+0xba>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	2380      	movs	r3, #128	@ 0x80
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d005      	beq.n	80010b6 <HAL_ADC_Init+0xba>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	2380      	movs	r3, #128	@ 0x80
 80010b0:	061b      	lsls	r3, r3, #24
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d111      	bne.n	80010da <HAL_ADC_Init+0xde>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	0892      	lsrs	r2, r2, #2
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6919      	ldr	r1, [r3, #16]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	e014      	b.n	8001104 <HAL_ADC_Init+0x108>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	0892      	lsrs	r2, r2, #2
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	4b79      	ldr	r3, [pc, #484]	@ (80012d0 <HAL_ADC_Init+0x2d4>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b78      	ldr	r3, [pc, #480]	@ (80012d0 <HAL_ADC_Init+0x2d4>)
 80010f0:	4978      	ldr	r1, [pc, #480]	@ (80012d4 <HAL_ADC_Init+0x2d8>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	4b76      	ldr	r3, [pc, #472]	@ (80012d0 <HAL_ADC_Init+0x2d4>)
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4b74      	ldr	r3, [pc, #464]	@ (80012d0 <HAL_ADC_Init+0x2d4>)
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2118      	movs	r1, #24
 8001110:	438a      	bics	r2, r1
 8001112:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68d9      	ldr	r1, [r3, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001126:	4b6a      	ldr	r3, [pc, #424]	@ (80012d0 <HAL_ADC_Init+0x2d4>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b69      	ldr	r3, [pc, #420]	@ (80012d0 <HAL_ADC_Init+0x2d4>)
 800112c:	496a      	ldr	r1, [pc, #424]	@ (80012d8 <HAL_ADC_Init+0x2dc>)
 800112e:	400a      	ands	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001132:	4b67      	ldr	r3, [pc, #412]	@ (80012d0 <HAL_ADC_Init+0x2d4>)
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800113a:	065a      	lsls	r2, r3, #25
 800113c:	4b64      	ldr	r3, [pc, #400]	@ (80012d0 <HAL_ADC_Init+0x2d4>)
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	2380      	movs	r3, #128	@ 0x80
 800114a:	055b      	lsls	r3, r3, #21
 800114c:	4013      	ands	r3, r2
 800114e:	d108      	bne.n	8001162 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2180      	movs	r1, #128	@ 0x80
 800115c:	0549      	lsls	r1, r1, #21
 800115e:	430a      	orrs	r2, r1
 8001160:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	495b      	ldr	r1, [pc, #364]	@ (80012dc <HAL_ADC_Init+0x2e0>)
 800116e:	400a      	ands	r2, r1
 8001170:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68d9      	ldr	r1, [r3, #12]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d101      	bne.n	8001188 <HAL_ADC_Init+0x18c>
 8001184:	2304      	movs	r3, #4
 8001186:	e000      	b.n	800118a <HAL_ADC_Init+0x18e>
 8001188:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800118a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2020      	movs	r0, #32
 8001190:	5c1b      	ldrb	r3, [r3, r0]
 8001192:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001194:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	202c      	movs	r0, #44	@ 0x2c
 800119a:	5c1b      	ldrb	r3, [r3, r0]
 800119c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800119e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011a4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80011ac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011b4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011c2:	23c2      	movs	r3, #194	@ 0xc2
 80011c4:	33ff      	adds	r3, #255	@ 0xff
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d00b      	beq.n	80011e2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68d9      	ldr	r1, [r3, #12]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2221      	movs	r2, #33	@ 0x21
 80011e6:	5c9b      	ldrb	r3, [r3, r2]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d11a      	bne.n	8001222 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2220      	movs	r2, #32
 80011f0:	5c9b      	ldrb	r3, [r3, r2]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d109      	bne.n	800120a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2180      	movs	r1, #128	@ 0x80
 8001202:	0249      	lsls	r1, r1, #9
 8001204:	430a      	orrs	r2, r1
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	e00b      	b.n	8001222 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800120e:	2220      	movs	r2, #32
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	2201      	movs	r2, #1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001226:	2b01      	cmp	r3, #1
 8001228:	d11f      	bne.n	800126a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	492a      	ldr	r1, [pc, #168]	@ (80012e0 <HAL_ADC_Init+0x2e4>)
 8001236:	400a      	ands	r2, r1
 8001238:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6919      	ldr	r1, [r3, #16]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001248:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800124e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	e00e      	b.n	8001288 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2101      	movs	r1, #1
 8001284:	438a      	bics	r2, r1
 8001286:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2107      	movs	r1, #7
 8001294:	438a      	bics	r2, r1
 8001296:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6959      	ldr	r1, [r3, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012b4:	2203      	movs	r2, #3
 80012b6:	4393      	bics	r3, r2
 80012b8:	2201      	movs	r2, #1
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	fffffefd 	.word	0xfffffefd
 80012d0:	40012708 	.word	0x40012708
 80012d4:	ffc3ffff 	.word	0xffc3ffff
 80012d8:	fdffffff 	.word	0xfdffffff
 80012dc:	fffe0219 	.word	0xfffe0219
 80012e0:	fffffc03 	.word	0xfffffc03

080012e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2250      	movs	r2, #80	@ 0x50
 80012f2:	5c9b      	ldrb	r3, [r3, r2]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x18>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e06c      	b.n	80013d6 <HAL_ADC_ConfigChannel+0xf2>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2250      	movs	r2, #80	@ 0x50
 8001300:	2101      	movs	r1, #1
 8001302:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2204      	movs	r2, #4
 800130c:	4013      	ands	r3, r2
 800130e:	d00b      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001314:	2220      	movs	r2, #32
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2250      	movs	r2, #80	@ 0x50
 8001320:	2100      	movs	r1, #0
 8001322:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e056      	b.n	80013d6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4a2c      	ldr	r2, [pc, #176]	@ (80013e0 <HAL_ADC_ConfigChannel+0xfc>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d028      	beq.n	8001384 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	035b      	lsls	r3, r3, #13
 800133e:	0b5a      	lsrs	r2, r3, #13
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	02db      	lsls	r3, r3, #11
 8001350:	4013      	ands	r3, r2
 8001352:	d009      	beq.n	8001368 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <HAL_ADC_ConfigChannel+0x100>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <HAL_ADC_ConfigChannel+0x100>)
 800135a:	2180      	movs	r1, #128	@ 0x80
 800135c:	0409      	lsls	r1, r1, #16
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001362:	200a      	movs	r0, #10
 8001364:	f000 f844 	bl	80013f0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	029b      	lsls	r3, r3, #10
 8001370:	4013      	ands	r3, r2
 8001372:	d02b      	beq.n	80013cc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HAL_ADC_ConfigChannel+0x100>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_ADC_ConfigChannel+0x100>)
 800137a:	2180      	movs	r1, #128	@ 0x80
 800137c:	03c9      	lsls	r1, r1, #15
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e023      	b.n	80013cc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	035b      	lsls	r3, r3, #13
 8001390:	0b5b      	lsrs	r3, r3, #13
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	400a      	ands	r2, r1
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	@ 0x80
 80013a2:	02db      	lsls	r3, r3, #11
 80013a4:	4013      	ands	r3, r2
 80013a6:	d005      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <HAL_ADC_ConfigChannel+0x100>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <HAL_ADC_ConfigChannel+0x100>)
 80013ae:	490e      	ldr	r1, [pc, #56]	@ (80013e8 <HAL_ADC_ConfigChannel+0x104>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	4013      	ands	r3, r2
 80013be:	d005      	beq.n	80013cc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <HAL_ADC_ConfigChannel+0x100>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <HAL_ADC_ConfigChannel+0x100>)
 80013c6:	4909      	ldr	r1, [pc, #36]	@ (80013ec <HAL_ADC_ConfigChannel+0x108>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2250      	movs	r2, #80	@ 0x50
 80013d0:	2100      	movs	r1, #0
 80013d2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	00001001 	.word	0x00001001
 80013e4:	40012708 	.word	0x40012708
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	ffbfffff 	.word	0xffbfffff

080013f0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <ADC_DelayMicroSecond+0x38>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	490b      	ldr	r1, [pc, #44]	@ (800142c <ADC_DelayMicroSecond+0x3c>)
 80013fe:	0018      	movs	r0, r3
 8001400:	f7fe fe82 	bl	8000108 <__udivsi3>
 8001404:	0003      	movs	r3, r0
 8001406:	001a      	movs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4353      	muls	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800140e:	e002      	b.n	8001416 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3b01      	subs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f9      	bne.n	8001410 <ADC_DelayMicroSecond+0x20>
  }
}
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b004      	add	sp, #16
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	20000000 	.word	0x20000000
 800142c:	000f4240 	.word	0x000f4240

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	0002      	movs	r2, r0
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b7f      	cmp	r3, #127	@ 0x7f
 8001442:	d809      	bhi.n	8001458 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	001a      	movs	r2, r3
 800144a:	231f      	movs	r3, #31
 800144c:	401a      	ands	r2, r3
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <__NVIC_EnableIRQ+0x30>)
 8001450:	2101      	movs	r1, #1
 8001452:	4091      	lsls	r1, r2
 8001454:	000a      	movs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
  }
}
 8001458:	46c0      	nop			@ (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	0002      	movs	r2, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b7f      	cmp	r3, #127	@ 0x7f
 8001478:	d828      	bhi.n	80014cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800147a:	4a2f      	ldr	r2, [pc, #188]	@ (8001538 <__NVIC_SetPriority+0xd4>)
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b25b      	sxtb	r3, r3
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	33c0      	adds	r3, #192	@ 0xc0
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	589b      	ldr	r3, [r3, r2]
 800148a:	1dfa      	adds	r2, r7, #7
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	0011      	movs	r1, r2
 8001490:	2203      	movs	r2, #3
 8001492:	400a      	ands	r2, r1
 8001494:	00d2      	lsls	r2, r2, #3
 8001496:	21ff      	movs	r1, #255	@ 0xff
 8001498:	4091      	lsls	r1, r2
 800149a:	000a      	movs	r2, r1
 800149c:	43d2      	mvns	r2, r2
 800149e:	401a      	ands	r2, r3
 80014a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	019b      	lsls	r3, r3, #6
 80014a6:	22ff      	movs	r2, #255	@ 0xff
 80014a8:	401a      	ands	r2, r3
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	0018      	movs	r0, r3
 80014b0:	2303      	movs	r3, #3
 80014b2:	4003      	ands	r3, r0
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b8:	481f      	ldr	r0, [pc, #124]	@ (8001538 <__NVIC_SetPriority+0xd4>)
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	430a      	orrs	r2, r1
 80014c4:	33c0      	adds	r3, #192	@ 0xc0
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014ca:	e031      	b.n	8001530 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014cc:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <__NVIC_SetPriority+0xd8>)
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	0019      	movs	r1, r3
 80014d4:	230f      	movs	r3, #15
 80014d6:	400b      	ands	r3, r1
 80014d8:	3b08      	subs	r3, #8
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3306      	adds	r3, #6
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	18d3      	adds	r3, r2, r3
 80014e2:	3304      	adds	r3, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1dfa      	adds	r2, r7, #7
 80014e8:	7812      	ldrb	r2, [r2, #0]
 80014ea:	0011      	movs	r1, r2
 80014ec:	2203      	movs	r2, #3
 80014ee:	400a      	ands	r2, r1
 80014f0:	00d2      	lsls	r2, r2, #3
 80014f2:	21ff      	movs	r1, #255	@ 0xff
 80014f4:	4091      	lsls	r1, r2
 80014f6:	000a      	movs	r2, r1
 80014f8:	43d2      	mvns	r2, r2
 80014fa:	401a      	ands	r2, r3
 80014fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	019b      	lsls	r3, r3, #6
 8001502:	22ff      	movs	r2, #255	@ 0xff
 8001504:	401a      	ands	r2, r3
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	0018      	movs	r0, r3
 800150c:	2303      	movs	r3, #3
 800150e:	4003      	ands	r3, r0
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001514:	4809      	ldr	r0, [pc, #36]	@ (800153c <__NVIC_SetPriority+0xd8>)
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	001c      	movs	r4, r3
 800151c:	230f      	movs	r3, #15
 800151e:	4023      	ands	r3, r4
 8001520:	3b08      	subs	r3, #8
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	430a      	orrs	r2, r1
 8001526:	3306      	adds	r3, #6
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	18c3      	adds	r3, r0, r3
 800152c:	3304      	adds	r3, #4
 800152e:	601a      	str	r2, [r3, #0]
}
 8001530:	46c0      	nop			@ (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b003      	add	sp, #12
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	1e5a      	subs	r2, r3, #1
 800154c:	2380      	movs	r3, #128	@ 0x80
 800154e:	045b      	lsls	r3, r3, #17
 8001550:	429a      	cmp	r2, r3
 8001552:	d301      	bcc.n	8001558 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001554:	2301      	movs	r3, #1
 8001556:	e010      	b.n	800157a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <SysTick_Config+0x44>)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	3a01      	subs	r2, #1
 800155e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001560:	2301      	movs	r3, #1
 8001562:	425b      	negs	r3, r3
 8001564:	2103      	movs	r1, #3
 8001566:	0018      	movs	r0, r3
 8001568:	f7ff ff7c 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <SysTick_Config+0x44>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <SysTick_Config+0x44>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	210f      	movs	r1, #15
 8001594:	187b      	adds	r3, r7, r1
 8001596:	1c02      	adds	r2, r0, #0
 8001598:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	187b      	adds	r3, r7, r1
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	0011      	movs	r1, r2
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b004      	add	sp, #16
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	0002      	movs	r2, r0
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff ff33 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b002      	add	sp, #8
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ffaf 	bl	8001540 <SysTick_Config>
 80015e2:	0003      	movs	r3, r0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f4:	230f      	movs	r3, #15
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2225      	movs	r2, #37	@ 0x25
 8001600:	5c9b      	ldrb	r3, [r3, r2]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d008      	beq.n	800161a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2204      	movs	r2, #4
 800160c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2224      	movs	r2, #36	@ 0x24
 8001612:	2100      	movs	r1, #0
 8001614:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e024      	b.n	8001664 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	210e      	movs	r1, #14
 8001626:	438a      	bics	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	438a      	bics	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	221c      	movs	r2, #28
 8001640:	401a      	ands	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	2101      	movs	r1, #1
 8001648:	4091      	lsls	r1, r2
 800164a:	000a      	movs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2225      	movs	r2, #37	@ 0x25
 8001652:	2101      	movs	r1, #1
 8001654:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2224      	movs	r2, #36	@ 0x24
 800165a:	2100      	movs	r1, #0
 800165c:	5499      	strb	r1, [r3, r2]

    return status;
 800165e:	230f      	movs	r3, #15
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b004      	add	sp, #16
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001674:	210f      	movs	r1, #15
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2225      	movs	r2, #37	@ 0x25
 8001680:	5c9b      	ldrb	r3, [r3, r2]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d006      	beq.n	8001696 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2204      	movs	r2, #4
 800168c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e02a      	b.n	80016ec <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	210e      	movs	r1, #14
 80016a2:	438a      	bics	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	438a      	bics	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	221c      	movs	r2, #28
 80016bc:	401a      	ands	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	2101      	movs	r1, #1
 80016c4:	4091      	lsls	r1, r2
 80016c6:	000a      	movs	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2225      	movs	r2, #37	@ 0x25
 80016ce:	2101      	movs	r1, #1
 80016d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2224      	movs	r2, #36	@ 0x24
 80016d6:	2100      	movs	r1, #0
 80016d8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d004      	beq.n	80016ec <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	0010      	movs	r0, r2
 80016ea:	4798      	blx	r3
    }
  }
  return status;
 80016ec:	230f      	movs	r3, #15
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	781b      	ldrb	r3, [r3, #0]
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b004      	add	sp, #16
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001712:	e14f      	b.n	80019b4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4091      	lsls	r1, r2
 800171e:	000a      	movs	r2, r1
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d100      	bne.n	800172c <HAL_GPIO_Init+0x30>
 800172a:	e140      	b.n	80019ae <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2203      	movs	r2, #3
 8001732:	4013      	ands	r3, r2
 8001734:	2b01      	cmp	r3, #1
 8001736:	d005      	beq.n	8001744 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001740:	2b02      	cmp	r3, #2
 8001742:	d130      	bne.n	80017a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	409a      	lsls	r2, r3
 8001752:	0013      	movs	r3, r2
 8001754:	43da      	mvns	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	0013      	movs	r3, r2
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177a:	2201      	movs	r2, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	2201      	movs	r2, #1
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2203      	movs	r2, #3
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d017      	beq.n	80017e2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	43da      	mvns	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	409a      	lsls	r2, r3
 80017d4:	0013      	movs	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2203      	movs	r2, #3
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d123      	bne.n	8001836 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	58d3      	ldr	r3, [r2, r3]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2207      	movs	r2, #7
 8001800:	4013      	ands	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	691a      	ldr	r2, [r3, #16]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2107      	movs	r1, #7
 800181a:	400b      	ands	r3, r1
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	6939      	ldr	r1, [r7, #16]
 8001834:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2203      	movs	r2, #3
 8001854:	401a      	ands	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	23c0      	movs	r3, #192	@ 0xc0
 8001870:	029b      	lsls	r3, r3, #10
 8001872:	4013      	ands	r3, r2
 8001874:	d100      	bne.n	8001878 <HAL_GPIO_Init+0x17c>
 8001876:	e09a      	b.n	80019ae <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001878:	4b54      	ldr	r3, [pc, #336]	@ (80019cc <HAL_GPIO_Init+0x2d0>)
 800187a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800187c:	4b53      	ldr	r3, [pc, #332]	@ (80019cc <HAL_GPIO_Init+0x2d0>)
 800187e:	2101      	movs	r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001884:	4a52      	ldr	r2, [pc, #328]	@ (80019d0 <HAL_GPIO_Init+0x2d4>)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	589b      	ldr	r3, [r3, r2]
 8001890:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2203      	movs	r2, #3
 8001896:	4013      	ands	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	409a      	lsls	r2, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	43da      	mvns	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	23a0      	movs	r3, #160	@ 0xa0
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d019      	beq.n	80018e6 <HAL_GPIO_Init+0x1ea>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a47      	ldr	r2, [pc, #284]	@ (80019d4 <HAL_GPIO_Init+0x2d8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0x1e6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a46      	ldr	r2, [pc, #280]	@ (80019d8 <HAL_GPIO_Init+0x2dc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00d      	beq.n	80018de <HAL_GPIO_Init+0x1e2>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a45      	ldr	r2, [pc, #276]	@ (80019dc <HAL_GPIO_Init+0x2e0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x1de>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a44      	ldr	r2, [pc, #272]	@ (80019e0 <HAL_GPIO_Init+0x2e4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_GPIO_Init+0x1da>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e008      	b.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018d6:	2306      	movs	r3, #6
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018e6:	2300      	movs	r3, #0
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	2103      	movs	r1, #3
 80018ec:	400a      	ands	r2, r1
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4093      	lsls	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f8:	4935      	ldr	r1, [pc, #212]	@ (80019d0 <HAL_GPIO_Init+0x2d4>)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001906:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43da      	mvns	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	2380      	movs	r3, #128	@ 0x80
 800191c:	035b      	lsls	r3, r3, #13
 800191e:	4013      	ands	r3, r2
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800192a:	4b2e      	ldr	r3, [pc, #184]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001930:	4b2c      	ldr	r3, [pc, #176]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43da      	mvns	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	039b      	lsls	r3, r3, #14
 8001948:	4013      	ands	r3, r2
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001954:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800195a:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43da      	mvns	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	029b      	lsls	r3, r3, #10
 8001972:	4013      	ands	r3, r2
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800197e:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43da      	mvns	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	4013      	ands	r3, r2
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019a8:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <HAL_GPIO_Init+0x2e8>)
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	40da      	lsrs	r2, r3
 80019bc:	1e13      	subs	r3, r2, #0
 80019be:	d000      	beq.n	80019c2 <HAL_GPIO_Init+0x2c6>
 80019c0:	e6a8      	b.n	8001714 <HAL_GPIO_Init+0x18>
  }
}
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	46c0      	nop			@ (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b006      	add	sp, #24
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000
 80019d4:	50000400 	.word	0x50000400
 80019d8:	50000800 	.word	0x50000800
 80019dc:	50000c00 	.word	0x50000c00
 80019e0:	50001c00 	.word	0x50001c00
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	0008      	movs	r0, r1
 80019f2:	0011      	movs	r1, r2
 80019f4:	1cbb      	adds	r3, r7, #2
 80019f6:	1c02      	adds	r2, r0, #0
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	1c7b      	adds	r3, r7, #1
 80019fc:	1c0a      	adds	r2, r1, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a00:	1c7b      	adds	r3, r7, #1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	881a      	ldrh	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a12:	1cbb      	adds	r3, r7, #2
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e082      	b.n	8001b3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2241      	movs	r2, #65	@ 0x41
 8001a3a:	5c9b      	ldrb	r3, [r3, r2]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2240      	movs	r2, #64	@ 0x40
 8001a46:	2100      	movs	r1, #0
 8001a48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7fe fed3 	bl	80007f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2241      	movs	r2, #65	@ 0x41
 8001a56:	2124      	movs	r1, #36	@ 0x24
 8001a58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	438a      	bics	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4934      	ldr	r1, [pc, #208]	@ (8001b44 <HAL_I2C_Init+0x120>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4931      	ldr	r1, [pc, #196]	@ (8001b48 <HAL_I2C_Init+0x124>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d108      	bne.n	8001aa2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2180      	movs	r1, #128	@ 0x80
 8001a9a:	0209      	lsls	r1, r1, #8
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	e007      	b.n	8001ab2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2184      	movs	r1, #132	@ 0x84
 8001aac:	0209      	lsls	r1, r1, #8
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d104      	bne.n	8001ac4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2280      	movs	r2, #128	@ 0x80
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	491f      	ldr	r1, [pc, #124]	@ (8001b4c <HAL_I2C_Init+0x128>)
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	491a      	ldr	r1, [pc, #104]	@ (8001b48 <HAL_I2C_Init+0x124>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	431a      	orrs	r2, r3
 8001aee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69d9      	ldr	r1, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1a      	ldr	r2, [r3, #32]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2101      	movs	r1, #1
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2241      	movs	r2, #65	@ 0x41
 8001b28:	2120      	movs	r1, #32
 8001b2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2242      	movs	r2, #66	@ 0x42
 8001b36:	2100      	movs	r1, #0
 8001b38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b002      	add	sp, #8
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	f0ffffff 	.word	0xf0ffffff
 8001b48:	ffff7fff 	.word	0xffff7fff
 8001b4c:	02008000 	.word	0x02008000

08001b50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2241      	movs	r2, #65	@ 0x41
 8001b5e:	5c9b      	ldrb	r3, [r3, r2]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b20      	cmp	r3, #32
 8001b64:	d138      	bne.n	8001bd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2240      	movs	r2, #64	@ 0x40
 8001b6a:	5c9b      	ldrb	r3, [r3, r2]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e032      	b.n	8001bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2240      	movs	r2, #64	@ 0x40
 8001b78:	2101      	movs	r1, #1
 8001b7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2241      	movs	r2, #65	@ 0x41
 8001b80:	2124      	movs	r1, #36	@ 0x24
 8001b82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	438a      	bics	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4911      	ldr	r1, [pc, #68]	@ (8001be4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6819      	ldr	r1, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2241      	movs	r2, #65	@ 0x41
 8001bc8:	2120      	movs	r1, #32
 8001bca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2240      	movs	r2, #64	@ 0x40
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
  }
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	ffffefff 	.word	0xffffefff

08001be8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2241      	movs	r2, #65	@ 0x41
 8001bf6:	5c9b      	ldrb	r3, [r3, r2]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d139      	bne.n	8001c72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2240      	movs	r2, #64	@ 0x40
 8001c02:	5c9b      	ldrb	r3, [r3, r2]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e033      	b.n	8001c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2240      	movs	r2, #64	@ 0x40
 8001c10:	2101      	movs	r1, #1
 8001c12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2241      	movs	r2, #65	@ 0x41
 8001c18:	2124      	movs	r1, #36	@ 0x24
 8001c1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2101      	movs	r1, #1
 8001c28:	438a      	bics	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2241      	movs	r2, #65	@ 0x41
 8001c62:	2120      	movs	r1, #32
 8001c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2240      	movs	r2, #64	@ 0x40
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c72:	2302      	movs	r3, #2
  }
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b004      	add	sp, #16
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	fffff0ff 	.word	0xfffff0ff

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f000 fb5a 	bl	8002348 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c94:	4bce      	ldr	r3, [pc, #824]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	220c      	movs	r2, #12
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c9e:	4bcc      	ldr	r3, [pc, #816]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	025b      	lsls	r3, r3, #9
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d100      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x36>
 8001cb4:	e07c      	b.n	8001db0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d007      	beq.n	8001ccc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d111      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x66>
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	2380      	movs	r3, #128	@ 0x80
 8001cc6:	025b      	lsls	r3, r3, #9
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d10c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	4bc0      	ldr	r3, [pc, #768]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d100      	bne.n	8001cda <HAL_RCC_OscConfig+0x5a>
 8001cd8:	e069      	b.n	8001dae <HAL_RCC_OscConfig+0x12e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d165      	bne.n	8001dae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e330      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	2380      	movs	r3, #128	@ 0x80
 8001cec:	025b      	lsls	r3, r3, #9
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_OscConfig+0x82>
 8001cf2:	4bb7      	ldr	r3, [pc, #732]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4bb6      	ldr	r3, [pc, #728]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001cf8:	2180      	movs	r1, #128	@ 0x80
 8001cfa:	0249      	lsls	r1, r1, #9
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e027      	b.n	8001d52 <HAL_RCC_OscConfig+0xd2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	23a0      	movs	r3, #160	@ 0xa0
 8001d08:	02db      	lsls	r3, r3, #11
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d10e      	bne.n	8001d2c <HAL_RCC_OscConfig+0xac>
 8001d0e:	4bb0      	ldr	r3, [pc, #704]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4baf      	ldr	r3, [pc, #700]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001d14:	2180      	movs	r1, #128	@ 0x80
 8001d16:	02c9      	lsls	r1, r1, #11
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	4bac      	ldr	r3, [pc, #688]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4bab      	ldr	r3, [pc, #684]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001d22:	2180      	movs	r1, #128	@ 0x80
 8001d24:	0249      	lsls	r1, r1, #9
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e012      	b.n	8001d52 <HAL_RCC_OscConfig+0xd2>
 8001d2c:	4ba8      	ldr	r3, [pc, #672]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4ba7      	ldr	r3, [pc, #668]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001d32:	49a8      	ldr	r1, [pc, #672]	@ (8001fd4 <HAL_RCC_OscConfig+0x354>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	4ba5      	ldr	r3, [pc, #660]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	025b      	lsls	r3, r3, #9
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4ba2      	ldr	r3, [pc, #648]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4ba1      	ldr	r3, [pc, #644]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001d4c:	49a2      	ldr	r1, [pc, #648]	@ (8001fd8 <HAL_RCC_OscConfig+0x358>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d014      	beq.n	8001d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff f945 	bl	8000fe8 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff f940 	bl	8000fe8 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e2e8      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d76:	4b96      	ldr	r3, [pc, #600]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	029b      	lsls	r3, r3, #10
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe4>
 8001d82:	e015      	b.n	8001db0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff f930 	bl	8000fe8 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8e:	f7ff f92b 	bl	8000fe8 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	@ 0x64
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e2d3      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001da0:	4b8b      	ldr	r3, [pc, #556]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	4013      	ands	r3, r2
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x10e>
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	d100      	bne.n	8001dbc <HAL_RCC_OscConfig+0x13c>
 8001dba:	e08b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d13e      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1cc>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d13b      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001dd4:	4b7e      	ldr	r3, [pc, #504]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2204      	movs	r2, #4
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <HAL_RCC_OscConfig+0x168>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e2af      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b79      	ldr	r3, [pc, #484]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a7b      	ldr	r2, [pc, #492]	@ (8001fdc <HAL_RCC_OscConfig+0x35c>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	021a      	lsls	r2, r3, #8
 8001df8:	4b75      	ldr	r3, [pc, #468]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dfe:	4b74      	ldr	r3, [pc, #464]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2209      	movs	r2, #9
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	4b71      	ldr	r3, [pc, #452]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e10:	f000 fbe8 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8001e14:	0001      	movs	r1, r0
 8001e16:	4b6e      	ldr	r3, [pc, #440]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	4013      	ands	r3, r2
 8001e20:	4a6f      	ldr	r2, [pc, #444]	@ (8001fe0 <HAL_RCC_OscConfig+0x360>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	000a      	movs	r2, r1
 8001e26:	40da      	lsrs	r2, r3
 8001e28:	4b6e      	ldr	r3, [pc, #440]	@ (8001fe4 <HAL_RCC_OscConfig+0x364>)
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001e2c:	4b6e      	ldr	r3, [pc, #440]	@ (8001fe8 <HAL_RCC_OscConfig+0x368>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2513      	movs	r5, #19
 8001e32:	197c      	adds	r4, r7, r5
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff f891 	bl	8000f5c <HAL_InitTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e3e:	197b      	adds	r3, r7, r5
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d046      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8001e46:	197b      	adds	r3, r7, r5
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	e27d      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d027      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e52:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2209      	movs	r2, #9
 8001e58:	4393      	bics	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff f8c0 	bl	8000fe8 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7ff f8bb 	bl	8000fe8 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e263      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e80:	4b53      	ldr	r3, [pc, #332]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2204      	movs	r2, #4
 8001e86:	4013      	ands	r3, r2
 8001e88:	d0f1      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8a:	4b51      	ldr	r3, [pc, #324]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4a53      	ldr	r2, [pc, #332]	@ (8001fdc <HAL_RCC_OscConfig+0x35c>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	021a      	lsls	r2, r3, #8
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	e018      	b.n	8001ed4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	438a      	bics	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7ff f89b 	bl	8000fe8 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff f896 	bl	8000fe8 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e23e      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eca:	4b41      	ldr	r3, [pc, #260]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d1f1      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	4013      	ands	r3, r2
 8001edc:	d100      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x260>
 8001ede:	e0a1      	b.n	8002024 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d140      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x27e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e224      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001efe:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4a3a      	ldr	r2, [pc, #232]	@ (8001fec <HAL_RCC_OscConfig+0x36c>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1a      	ldr	r2, [r3, #32]
 8001f0c:	4b30      	ldr	r3, [pc, #192]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f12:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	0a19      	lsrs	r1, r3, #8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	061a      	lsls	r2, r3, #24
 8001f20:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	0b5b      	lsrs	r3, r3, #13
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	2280      	movs	r2, #128	@ 0x80
 8001f30:	0212      	lsls	r2, r2, #8
 8001f32:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f34:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	4928      	ldr	r1, [pc, #160]	@ (8001fe0 <HAL_RCC_OscConfig+0x360>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f44:	4b27      	ldr	r3, [pc, #156]	@ (8001fe4 <HAL_RCC_OscConfig+0x364>)
 8001f46:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f48:	4b27      	ldr	r3, [pc, #156]	@ (8001fe8 <HAL_RCC_OscConfig+0x368>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2513      	movs	r5, #19
 8001f4e:	197c      	adds	r4, r7, r5
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff f803 	bl	8000f5c <HAL_InitTick>
 8001f56:	0003      	movs	r3, r0
 8001f58:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f5a:	197b      	adds	r3, r7, r5
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d060      	beq.n	8002024 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8001f62:	197b      	adds	r3, r7, r5
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	e1ef      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d03f      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f70:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001f76:	2180      	movs	r1, #128	@ 0x80
 8001f78:	0049      	lsls	r1, r1, #1
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff f833 	bl	8000fe8 <HAL_GetTick>
 8001f82:	0003      	movs	r3, r0
 8001f84:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f88:	f7ff f82e 	bl	8000fe8 <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1d6      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	2380      	movs	r3, #128	@ 0x80
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4a10      	ldr	r2, [pc, #64]	@ (8001fec <HAL_RCC_OscConfig+0x36c>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fba:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	0a19      	lsrs	r1, r3, #8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	061a      	lsls	r2, r3, #24
 8001fc8:	4b01      	ldr	r3, [pc, #4]	@ (8001fd0 <HAL_RCC_OscConfig+0x350>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	e029      	b.n	8002024 <HAL_RCC_OscConfig+0x3a4>
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	fffeffff 	.word	0xfffeffff
 8001fd8:	fffbffff 	.word	0xfffbffff
 8001fdc:	ffffe0ff 	.word	0xffffe0ff
 8001fe0:	08004080 	.word	0x08004080
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ff0:	4bbe      	ldr	r3, [pc, #760]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4bbd      	ldr	r3, [pc, #756]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8001ff6:	49be      	ldr	r1, [pc, #760]	@ (80022f0 <HAL_RCC_OscConfig+0x670>)
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fff4 	bl	8000fe8 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002006:	f7fe ffef 	bl	8000fe8 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e197      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002018:	4bb4      	ldr	r3, [pc, #720]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4013      	ands	r3, r2
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2208      	movs	r2, #8
 800202a:	4013      	ands	r3, r2
 800202c:	d036      	beq.n	800209c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d019      	beq.n	800206a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4bad      	ldr	r3, [pc, #692]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002038:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800203a:	4bac      	ldr	r3, [pc, #688]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 800203c:	2101      	movs	r1, #1
 800203e:	430a      	orrs	r2, r1
 8002040:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7fe ffd1 	bl	8000fe8 <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204c:	f7fe ffcc 	bl	8000fe8 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e174      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800205e:	4ba3      	ldr	r3, [pc, #652]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	d0f1      	beq.n	800204c <HAL_RCC_OscConfig+0x3cc>
 8002068:	e018      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206a:	4ba0      	ldr	r3, [pc, #640]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 800206c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800206e:	4b9f      	ldr	r3, [pc, #636]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002070:	2101      	movs	r1, #1
 8002072:	438a      	bics	r2, r1
 8002074:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7fe ffb7 	bl	8000fe8 <HAL_GetTick>
 800207a:	0003      	movs	r3, r0
 800207c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7fe ffb2 	bl	8000fe8 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e15a      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002092:	4b96      	ldr	r3, [pc, #600]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002096:	2202      	movs	r2, #2
 8002098:	4013      	ands	r3, r2
 800209a:	d1f1      	bne.n	8002080 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2204      	movs	r2, #4
 80020a2:	4013      	ands	r3, r2
 80020a4:	d100      	bne.n	80020a8 <HAL_RCC_OscConfig+0x428>
 80020a6:	e0ae      	b.n	8002206 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a8:	2027      	movs	r0, #39	@ 0x27
 80020aa:	183b      	adds	r3, r7, r0
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b0:	4b8e      	ldr	r3, [pc, #568]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 80020b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	4013      	ands	r3, r2
 80020ba:	d109      	bne.n	80020d0 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	4b8b      	ldr	r3, [pc, #556]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 80020be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020c0:	4b8a      	ldr	r3, [pc, #552]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 80020c2:	2180      	movs	r1, #128	@ 0x80
 80020c4:	0549      	lsls	r1, r1, #21
 80020c6:	430a      	orrs	r2, r1
 80020c8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80020ca:	183b      	adds	r3, r7, r0
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	4b88      	ldr	r3, [pc, #544]	@ (80022f4 <HAL_RCC_OscConfig+0x674>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	@ 0x80
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d11a      	bne.n	8002112 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020dc:	4b85      	ldr	r3, [pc, #532]	@ (80022f4 <HAL_RCC_OscConfig+0x674>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b84      	ldr	r3, [pc, #528]	@ (80022f4 <HAL_RCC_OscConfig+0x674>)
 80020e2:	2180      	movs	r1, #128	@ 0x80
 80020e4:	0049      	lsls	r1, r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7fe ff7d 	bl	8000fe8 <HAL_GetTick>
 80020ee:	0003      	movs	r3, r0
 80020f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7fe ff78 	bl	8000fe8 <HAL_GetTick>
 80020f8:	0002      	movs	r2, r0
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	@ 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e120      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b7b      	ldr	r3, [pc, #492]	@ (80022f4 <HAL_RCC_OscConfig+0x674>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	@ 0x80
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4013      	ands	r3, r2
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	429a      	cmp	r2, r3
 800211c:	d107      	bne.n	800212e <HAL_RCC_OscConfig+0x4ae>
 800211e:	4b73      	ldr	r3, [pc, #460]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002120:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002122:	4b72      	ldr	r3, [pc, #456]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002124:	2180      	movs	r1, #128	@ 0x80
 8002126:	0049      	lsls	r1, r1, #1
 8002128:	430a      	orrs	r2, r1
 800212a:	651a      	str	r2, [r3, #80]	@ 0x50
 800212c:	e031      	b.n	8002192 <HAL_RCC_OscConfig+0x512>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x4d0>
 8002136:	4b6d      	ldr	r3, [pc, #436]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002138:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800213a:	4b6c      	ldr	r3, [pc, #432]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 800213c:	496c      	ldr	r1, [pc, #432]	@ (80022f0 <HAL_RCC_OscConfig+0x670>)
 800213e:	400a      	ands	r2, r1
 8002140:	651a      	str	r2, [r3, #80]	@ 0x50
 8002142:	4b6a      	ldr	r3, [pc, #424]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002144:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002146:	4b69      	ldr	r3, [pc, #420]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002148:	496b      	ldr	r1, [pc, #428]	@ (80022f8 <HAL_RCC_OscConfig+0x678>)
 800214a:	400a      	ands	r2, r1
 800214c:	651a      	str	r2, [r3, #80]	@ 0x50
 800214e:	e020      	b.n	8002192 <HAL_RCC_OscConfig+0x512>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	23a0      	movs	r3, #160	@ 0xa0
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	429a      	cmp	r2, r3
 800215a:	d10e      	bne.n	800217a <HAL_RCC_OscConfig+0x4fa>
 800215c:	4b63      	ldr	r3, [pc, #396]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 800215e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002160:	4b62      	ldr	r3, [pc, #392]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002162:	2180      	movs	r1, #128	@ 0x80
 8002164:	00c9      	lsls	r1, r1, #3
 8002166:	430a      	orrs	r2, r1
 8002168:	651a      	str	r2, [r3, #80]	@ 0x50
 800216a:	4b60      	ldr	r3, [pc, #384]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 800216c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800216e:	4b5f      	ldr	r3, [pc, #380]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002170:	2180      	movs	r1, #128	@ 0x80
 8002172:	0049      	lsls	r1, r1, #1
 8002174:	430a      	orrs	r2, r1
 8002176:	651a      	str	r2, [r3, #80]	@ 0x50
 8002178:	e00b      	b.n	8002192 <HAL_RCC_OscConfig+0x512>
 800217a:	4b5c      	ldr	r3, [pc, #368]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 800217c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800217e:	4b5b      	ldr	r3, [pc, #364]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002180:	495b      	ldr	r1, [pc, #364]	@ (80022f0 <HAL_RCC_OscConfig+0x670>)
 8002182:	400a      	ands	r2, r1
 8002184:	651a      	str	r2, [r3, #80]	@ 0x50
 8002186:	4b59      	ldr	r3, [pc, #356]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002188:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800218a:	4b58      	ldr	r3, [pc, #352]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 800218c:	495a      	ldr	r1, [pc, #360]	@ (80022f8 <HAL_RCC_OscConfig+0x678>)
 800218e:	400a      	ands	r2, r1
 8002190:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d015      	beq.n	80021c6 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7fe ff25 	bl	8000fe8 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021a2:	e009      	b.n	80021b8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7fe ff20 	bl	8000fe8 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	4a53      	ldr	r2, [pc, #332]	@ (80022fc <HAL_RCC_OscConfig+0x67c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0c7      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021b8:	4b4c      	ldr	r3, [pc, #304]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 80021ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4013      	ands	r3, r2
 80021c2:	d0ef      	beq.n	80021a4 <HAL_RCC_OscConfig+0x524>
 80021c4:	e014      	b.n	80021f0 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7fe ff0f 	bl	8000fe8 <HAL_GetTick>
 80021ca:	0003      	movs	r3, r0
 80021cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ce:	e009      	b.n	80021e4 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff0a 	bl	8000fe8 <HAL_GetTick>
 80021d4:	0002      	movs	r2, r0
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	4a48      	ldr	r2, [pc, #288]	@ (80022fc <HAL_RCC_OscConfig+0x67c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0b1      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021e4:	4b41      	ldr	r3, [pc, #260]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 80021e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d1ef      	bne.n	80021d0 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f0:	2327      	movs	r3, #39	@ 0x27
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fa:	4b3c      	ldr	r3, [pc, #240]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 80021fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021fe:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002200:	493f      	ldr	r1, [pc, #252]	@ (8002300 <HAL_RCC_OscConfig+0x680>)
 8002202:	400a      	ands	r2, r1
 8002204:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	2b00      	cmp	r3, #0
 800220c:	d100      	bne.n	8002210 <HAL_RCC_OscConfig+0x590>
 800220e:	e09a      	b.n	8002346 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d064      	beq.n	80022e0 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	2b02      	cmp	r3, #2
 800221c:	d145      	bne.n	80022aa <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221e:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b32      	ldr	r3, [pc, #200]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002224:	4937      	ldr	r1, [pc, #220]	@ (8002304 <HAL_RCC_OscConfig+0x684>)
 8002226:	400a      	ands	r2, r1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fedd 	bl	8000fe8 <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe fed8 	bl	8000fe8 <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e080      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002246:	4b29      	ldr	r3, [pc, #164]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	049b      	lsls	r3, r3, #18
 800224e:	4013      	ands	r3, r2
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002252:	4b26      	ldr	r3, [pc, #152]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	4a2c      	ldr	r2, [pc, #176]	@ (8002308 <HAL_RCC_OscConfig+0x688>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	431a      	orrs	r2, r3
 800226c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 800226e:	430a      	orrs	r2, r1
 8002270:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002272:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 8002278:	2180      	movs	r1, #128	@ 0x80
 800227a:	0449      	lsls	r1, r1, #17
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe feb2 	bl	8000fe8 <HAL_GetTick>
 8002284:	0003      	movs	r3, r0
 8002286:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228a:	f7fe fead 	bl	8000fe8 <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e055      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800229c:	4b13      	ldr	r3, [pc, #76]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	049b      	lsls	r3, r3, #18
 80022a4:	4013      	ands	r3, r2
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x60a>
 80022a8:	e04d      	b.n	8002346 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 80022b0:	4914      	ldr	r1, [pc, #80]	@ (8002304 <HAL_RCC_OscConfig+0x684>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fe97 	bl	8000fe8 <HAL_GetTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe fe92 	bl	8000fe8 <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e03a      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_RCC_OscConfig+0x66c>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2380      	movs	r3, #128	@ 0x80
 80022d8:	049b      	lsls	r3, r3, #18
 80022da:	4013      	ands	r3, r2
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x640>
 80022de:	e032      	b.n	8002346 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d111      	bne.n	800230c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e02d      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
 80022ec:	40021000 	.word	0x40021000
 80022f0:	fffffeff 	.word	0xfffffeff
 80022f4:	40007000 	.word	0x40007000
 80022f8:	fffffbff 	.word	0xfffffbff
 80022fc:	00001388 	.word	0x00001388
 8002300:	efffffff 	.word	0xefffffff
 8002304:	feffffff 	.word	0xfeffffff
 8002308:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800230c:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <HAL_RCC_OscConfig+0x6d0>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	429a      	cmp	r2, r3
 8002320:	d10f      	bne.n	8002342 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	23f0      	movs	r3, #240	@ 0xf0
 8002326:	039b      	lsls	r3, r3, #14
 8002328:	401a      	ands	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d107      	bne.n	8002342 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	23c0      	movs	r3, #192	@ 0xc0
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	401a      	ands	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b00a      	add	sp, #40	@ 0x28
 800234e:	bdb0      	pop	{r4, r5, r7, pc}
 8002350:	40021000 	.word	0x40021000

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b5b0      	push	{r4, r5, r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e128      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b96      	ldr	r3, [pc, #600]	@ (80025c4 <HAL_RCC_ClockConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2201      	movs	r2, #1
 800236e:	4013      	ands	r3, r2
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d91e      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b93      	ldr	r3, [pc, #588]	@ (80025c4 <HAL_RCC_ClockConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	4393      	bics	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	4b90      	ldr	r3, [pc, #576]	@ (80025c4 <HAL_RCC_ClockConfig+0x270>)
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002388:	f7fe fe2e 	bl	8000fe8 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002390:	e009      	b.n	80023a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f7fe fe29 	bl	8000fe8 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	4a8a      	ldr	r2, [pc, #552]	@ (80025c8 <HAL_RCC_ClockConfig+0x274>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e109      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b87      	ldr	r3, [pc, #540]	@ (80025c4 <HAL_RCC_ClockConfig+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	4013      	ands	r3, r2
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1ee      	bne.n	8002392 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d009      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023be:	4b83      	ldr	r3, [pc, #524]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	22f0      	movs	r2, #240	@ 0xf0
 80023c4:	4393      	bics	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	4b7f      	ldr	r3, [pc, #508]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 80023ce:	430a      	orrs	r2, r1
 80023d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	d100      	bne.n	80023de <HAL_RCC_ClockConfig+0x8a>
 80023dc:	e089      	b.n	80024f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e6:	4b79      	ldr	r3, [pc, #484]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	029b      	lsls	r3, r3, #10
 80023ee:	4013      	ands	r3, r2
 80023f0:	d120      	bne.n	8002434 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0e1      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023fe:	4b73      	ldr	r3, [pc, #460]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	@ 0x80
 8002404:	049b      	lsls	r3, r3, #18
 8002406:	4013      	ands	r3, r2
 8002408:	d114      	bne.n	8002434 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0d5      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d106      	bne.n	8002424 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002416:	4b6d      	ldr	r3, [pc, #436]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2204      	movs	r2, #4
 800241c:	4013      	ands	r3, r2
 800241e:	d109      	bne.n	8002434 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0ca      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002424:	4b69      	ldr	r3, [pc, #420]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4013      	ands	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0c2      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002434:	4b65      	ldr	r3, [pc, #404]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2203      	movs	r2, #3
 800243a:	4393      	bics	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4b62      	ldr	r3, [pc, #392]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7fe fdce 	bl	8000fe8 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d111      	bne.n	800247c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002458:	e009      	b.n	800246e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245a:	f7fe fdc5 	bl	8000fe8 <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	4a58      	ldr	r2, [pc, #352]	@ (80025c8 <HAL_RCC_ClockConfig+0x274>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e0a5      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800246e:	4b57      	ldr	r3, [pc, #348]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	220c      	movs	r2, #12
 8002474:	4013      	ands	r3, r2
 8002476:	2b08      	cmp	r3, #8
 8002478:	d1ef      	bne.n	800245a <HAL_RCC_ClockConfig+0x106>
 800247a:	e03a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d111      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002484:	e009      	b.n	800249a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002486:	f7fe fdaf 	bl	8000fe8 <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	4a4d      	ldr	r2, [pc, #308]	@ (80025c8 <HAL_RCC_ClockConfig+0x274>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e08f      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249a:	4b4c      	ldr	r3, [pc, #304]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	220c      	movs	r2, #12
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d1ef      	bne.n	8002486 <HAL_RCC_ClockConfig+0x132>
 80024a6:	e024      	b.n	80024f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d11b      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024b0:	e009      	b.n	80024c6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b2:	f7fe fd99 	bl	8000fe8 <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	4a42      	ldr	r2, [pc, #264]	@ (80025c8 <HAL_RCC_ClockConfig+0x274>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e079      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c6:	4b41      	ldr	r3, [pc, #260]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	220c      	movs	r2, #12
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d1ef      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x15e>
 80024d2:	e00e      	b.n	80024f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fd88 	bl	8000fe8 <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	4a3a      	ldr	r2, [pc, #232]	@ (80025c8 <HAL_RCC_ClockConfig+0x274>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e068      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024e8:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	220c      	movs	r2, #12
 80024ee:	4013      	ands	r3, r2
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f2:	4b34      	ldr	r3, [pc, #208]	@ (80025c4 <HAL_RCC_ClockConfig+0x270>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2201      	movs	r2, #1
 80024f8:	4013      	ands	r3, r2
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d21e      	bcs.n	800253e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002500:	4b30      	ldr	r3, [pc, #192]	@ (80025c4 <HAL_RCC_ClockConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	4393      	bics	r3, r2
 8002508:	0019      	movs	r1, r3
 800250a:	4b2e      	ldr	r3, [pc, #184]	@ (80025c4 <HAL_RCC_ClockConfig+0x270>)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002512:	f7fe fd69 	bl	8000fe8 <HAL_GetTick>
 8002516:	0003      	movs	r3, r0
 8002518:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	e009      	b.n	8002530 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fd64 	bl	8000fe8 <HAL_GetTick>
 8002520:	0002      	movs	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	4a28      	ldr	r2, [pc, #160]	@ (80025c8 <HAL_RCC_ClockConfig+0x274>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e044      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002530:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_RCC_ClockConfig+0x270>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2201      	movs	r2, #1
 8002536:	4013      	ands	r3, r2
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d1ee      	bne.n	800251c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2204      	movs	r2, #4
 8002544:	4013      	ands	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002548:	4b20      	ldr	r3, [pc, #128]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a20      	ldr	r2, [pc, #128]	@ (80025d0 <HAL_RCC_ClockConfig+0x27c>)
 800254e:	4013      	ands	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b1d      	ldr	r3, [pc, #116]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 8002558:	430a      	orrs	r2, r1
 800255a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2208      	movs	r2, #8
 8002562:	4013      	ands	r3, r2
 8002564:	d00a      	beq.n	800257c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002566:	4b19      	ldr	r3, [pc, #100]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a1a      	ldr	r2, [pc, #104]	@ (80025d4 <HAL_RCC_ClockConfig+0x280>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	00da      	lsls	r2, r3, #3
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800257c:	f000 f832 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8002580:	0001      	movs	r1, r0
 8002582:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_RCC_ClockConfig+0x278>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	220f      	movs	r2, #15
 800258a:	4013      	ands	r3, r2
 800258c:	4a12      	ldr	r2, [pc, #72]	@ (80025d8 <HAL_RCC_ClockConfig+0x284>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	000a      	movs	r2, r1
 8002592:	40da      	lsrs	r2, r3
 8002594:	4b11      	ldr	r3, [pc, #68]	@ (80025dc <HAL_RCC_ClockConfig+0x288>)
 8002596:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <HAL_RCC_ClockConfig+0x28c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	250b      	movs	r5, #11
 800259e:	197c      	adds	r4, r7, r5
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fe fcdb 	bl	8000f5c <HAL_InitTick>
 80025a6:	0003      	movs	r3, r0
 80025a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80025aa:	197b      	adds	r3, r7, r5
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80025b2:	197b      	adds	r3, r7, r5
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	e000      	b.n	80025ba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b004      	add	sp, #16
 80025c0:	bdb0      	pop	{r4, r5, r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	40022000 	.word	0x40022000
 80025c8:	00001388 	.word	0x00001388
 80025cc:	40021000 	.word	0x40021000
 80025d0:	fffff8ff 	.word	0xfffff8ff
 80025d4:	ffffc7ff 	.word	0xffffc7ff
 80025d8:	08004080 	.word	0x08004080
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b5b0      	push	{r4, r5, r7, lr}
 80025e6:	b08e      	sub	sp, #56	@ 0x38
 80025e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025ea:	4b4c      	ldr	r3, [pc, #304]	@ (800271c <HAL_RCC_GetSysClockFreq+0x138>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025f2:	230c      	movs	r3, #12
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b0c      	cmp	r3, #12
 80025f8:	d014      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x40>
 80025fa:	d900      	bls.n	80025fe <HAL_RCC_GetSysClockFreq+0x1a>
 80025fc:	e07b      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x112>
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d002      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x24>
 8002602:	2b08      	cmp	r3, #8
 8002604:	d00b      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x3a>
 8002606:	e076      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002608:	4b44      	ldr	r3, [pc, #272]	@ (800271c <HAL_RCC_GetSysClockFreq+0x138>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2210      	movs	r2, #16
 800260e:	4013      	ands	r3, r2
 8002610:	d002      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002612:	4b43      	ldr	r3, [pc, #268]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002614:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002616:	e07c      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002618:	4b42      	ldr	r3, [pc, #264]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x140>)
 800261a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800261c:	e079      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800261e:	4b42      	ldr	r3, [pc, #264]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x144>)
 8002620:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002622:	e076      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002626:	0c9a      	lsrs	r2, r3, #18
 8002628:	230f      	movs	r3, #15
 800262a:	401a      	ands	r2, r3
 800262c:	4b3f      	ldr	r3, [pc, #252]	@ (800272c <HAL_RCC_GetSysClockFreq+0x148>)
 800262e:	5c9b      	ldrb	r3, [r3, r2]
 8002630:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002634:	0d9a      	lsrs	r2, r3, #22
 8002636:	2303      	movs	r3, #3
 8002638:	4013      	ands	r3, r2
 800263a:	3301      	adds	r3, #1
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800263e:	4b37      	ldr	r3, [pc, #220]	@ (800271c <HAL_RCC_GetSysClockFreq+0x138>)
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	025b      	lsls	r3, r3, #9
 8002646:	4013      	ands	r3, r2
 8002648:	d01a      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800264a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	4a35      	ldr	r2, [pc, #212]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x144>)
 8002654:	2300      	movs	r3, #0
 8002656:	69b8      	ldr	r0, [r7, #24]
 8002658:	69f9      	ldr	r1, [r7, #28]
 800265a:	f7fd fe01 	bl	8000260 <__aeabi_lmul>
 800265e:	0002      	movs	r2, r0
 8002660:	000b      	movs	r3, r1
 8002662:	0010      	movs	r0, r2
 8002664:	0019      	movs	r1, r3
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f7fd fdd5 	bl	8000220 <__aeabi_uldivmod>
 8002676:	0002      	movs	r2, r0
 8002678:	000b      	movs	r3, r1
 800267a:	0013      	movs	r3, r2
 800267c:	637b      	str	r3, [r7, #52]	@ 0x34
 800267e:	e037      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002680:	4b26      	ldr	r3, [pc, #152]	@ (800271c <HAL_RCC_GetSysClockFreq+0x138>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2210      	movs	r2, #16
 8002686:	4013      	ands	r3, r2
 8002688:	d01a      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800268a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4a23      	ldr	r2, [pc, #140]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002694:	2300      	movs	r3, #0
 8002696:	68b8      	ldr	r0, [r7, #8]
 8002698:	68f9      	ldr	r1, [r7, #12]
 800269a:	f7fd fde1 	bl	8000260 <__aeabi_lmul>
 800269e:	0002      	movs	r2, r0
 80026a0:	000b      	movs	r3, r1
 80026a2:	0010      	movs	r0, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f7fd fdb5 	bl	8000220 <__aeabi_uldivmod>
 80026b6:	0002      	movs	r2, r0
 80026b8:	000b      	movs	r3, r1
 80026ba:	0013      	movs	r3, r2
 80026bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80026be:	e017      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c2:	0018      	movs	r0, r3
 80026c4:	2300      	movs	r3, #0
 80026c6:	0019      	movs	r1, r3
 80026c8:	4a16      	ldr	r2, [pc, #88]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x140>)
 80026ca:	2300      	movs	r3, #0
 80026cc:	f7fd fdc8 	bl	8000260 <__aeabi_lmul>
 80026d0:	0002      	movs	r2, r0
 80026d2:	000b      	movs	r3, r1
 80026d4:	0010      	movs	r0, r2
 80026d6:	0019      	movs	r1, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	001c      	movs	r4, r3
 80026dc:	2300      	movs	r3, #0
 80026de:	001d      	movs	r5, r3
 80026e0:	0022      	movs	r2, r4
 80026e2:	002b      	movs	r3, r5
 80026e4:	f7fd fd9c 	bl	8000220 <__aeabi_uldivmod>
 80026e8:	0002      	movs	r2, r0
 80026ea:	000b      	movs	r3, r1
 80026ec:	0013      	movs	r3, r2
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80026f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80026f4:	e00d      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_RCC_GetSysClockFreq+0x138>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	0b5b      	lsrs	r3, r3, #13
 80026fc:	2207      	movs	r2, #7
 80026fe:	4013      	ands	r3, r2
 8002700:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	3301      	adds	r3, #1
 8002706:	2280      	movs	r2, #128	@ 0x80
 8002708:	0212      	lsls	r2, r2, #8
 800270a:	409a      	lsls	r2, r3
 800270c:	0013      	movs	r3, r2
 800270e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002710:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b00e      	add	sp, #56	@ 0x38
 800271a:	bdb0      	pop	{r4, r5, r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	003d0900 	.word	0x003d0900
 8002724:	00f42400 	.word	0x00f42400
 8002728:	007a1200 	.word	0x007a1200
 800272c:	08004098 	.word	0x08004098

08002730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002734:	4b02      	ldr	r3, [pc, #8]	@ (8002740 <HAL_RCC_GetHCLKFreq+0x10>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	20000000 	.word	0x20000000

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002748:	f7ff fff2 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 800274c:	0001      	movs	r1, r0
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	2207      	movs	r2, #7
 8002756:	4013      	ands	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	@ (800276c <HAL_RCC_GetPCLK1Freq+0x28>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	40d9      	lsrs	r1, r3
 800275e:	000b      	movs	r3, r1
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	40021000 	.word	0x40021000
 800276c:	08004090 	.word	0x08004090

08002770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002774:	f7ff ffdc 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002778:	0001      	movs	r1, r0
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	0adb      	lsrs	r3, r3, #11
 8002780:	2207      	movs	r2, #7
 8002782:	4013      	ands	r3, r2
 8002784:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	40d9      	lsrs	r1, r3
 800278a:	000b      	movs	r3, r1
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	40021000 	.word	0x40021000
 8002798:	08004090 	.word	0x08004090

0800279c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80027a4:	2017      	movs	r0, #23
 80027a6:	183b      	adds	r3, r7, r0
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2220      	movs	r2, #32
 80027b2:	4013      	ands	r3, r2
 80027b4:	d100      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80027b6:	e0c7      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b8:	4b8b      	ldr	r3, [pc, #556]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027bc:	2380      	movs	r3, #128	@ 0x80
 80027be:	055b      	lsls	r3, r3, #21
 80027c0:	4013      	ands	r3, r2
 80027c2:	d109      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	4b88      	ldr	r3, [pc, #544]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027c8:	4b87      	ldr	r3, [pc, #540]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027ca:	2180      	movs	r1, #128	@ 0x80
 80027cc:	0549      	lsls	r1, r1, #21
 80027ce:	430a      	orrs	r2, r1
 80027d0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80027d2:	183b      	adds	r3, r7, r0
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b84      	ldr	r3, [pc, #528]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	d11a      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e4:	4b81      	ldr	r3, [pc, #516]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b80      	ldr	r3, [pc, #512]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027ea:	2180      	movs	r1, #128	@ 0x80
 80027ec:	0049      	lsls	r1, r1, #1
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f2:	f7fe fbf9 	bl	8000fe8 <HAL_GetTick>
 80027f6:	0003      	movs	r3, r0
 80027f8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fa:	e008      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fc:	f7fe fbf4 	bl	8000fe8 <HAL_GetTick>
 8002800:	0002      	movs	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	@ 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0e8      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280e:	4b77      	ldr	r3, [pc, #476]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	2380      	movs	r3, #128	@ 0x80
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4013      	ands	r3, r2
 8002818:	d0f0      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800281a:	4b73      	ldr	r3, [pc, #460]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	23c0      	movs	r3, #192	@ 0xc0
 8002820:	039b      	lsls	r3, r3, #14
 8002822:	4013      	ands	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	23c0      	movs	r3, #192	@ 0xc0
 800282c:	039b      	lsls	r3, r3, #14
 800282e:	4013      	ands	r3, r2
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	429a      	cmp	r2, r3
 8002834:	d013      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	23c0      	movs	r3, #192	@ 0xc0
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	401a      	ands	r2, r3
 8002840:	23c0      	movs	r3, #192	@ 0xc0
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	429a      	cmp	r2, r3
 8002846:	d10a      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002848:	4b67      	ldr	r3, [pc, #412]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	029b      	lsls	r3, r3, #10
 8002850:	401a      	ands	r2, r3
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	029b      	lsls	r3, r3, #10
 8002856:	429a      	cmp	r2, r3
 8002858:	d101      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e0c0      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800285e:	4b62      	ldr	r3, [pc, #392]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002862:	23c0      	movs	r3, #192	@ 0xc0
 8002864:	029b      	lsls	r3, r3, #10
 8002866:	4013      	ands	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d03b      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	23c0      	movs	r3, #192	@ 0xc0
 8002876:	029b      	lsls	r3, r3, #10
 8002878:	4013      	ands	r3, r2
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	d033      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2220      	movs	r2, #32
 8002886:	4013      	ands	r3, r2
 8002888:	d02e      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800288a:	4b57      	ldr	r3, [pc, #348]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800288c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288e:	4a58      	ldr	r2, [pc, #352]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002894:	4b54      	ldr	r3, [pc, #336]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002896:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002898:	4b53      	ldr	r3, [pc, #332]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800289a:	2180      	movs	r1, #128	@ 0x80
 800289c:	0309      	lsls	r1, r1, #12
 800289e:	430a      	orrs	r2, r1
 80028a0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028a2:	4b51      	ldr	r3, [pc, #324]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028a6:	4b50      	ldr	r3, [pc, #320]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028a8:	4952      	ldr	r1, [pc, #328]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028aa:	400a      	ands	r2, r1
 80028ac:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80028ae:	4b4e      	ldr	r3, [pc, #312]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4013      	ands	r3, r2
 80028bc:	d014      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe fb93 	bl	8000fe8 <HAL_GetTick>
 80028c2:	0003      	movs	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028c6:	e009      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe fb8e 	bl	8000fe8 <HAL_GetTick>
 80028cc:	0002      	movs	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	4a49      	ldr	r2, [pc, #292]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e081      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028dc:	4b42      	ldr	r3, [pc, #264]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028e0:	2380      	movs	r3, #128	@ 0x80
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4013      	ands	r3, r2
 80028e6:	d0ef      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2220      	movs	r2, #32
 80028ee:	4013      	ands	r3, r2
 80028f0:	d01f      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	23c0      	movs	r3, #192	@ 0xc0
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	401a      	ands	r2, r3
 80028fc:	23c0      	movs	r3, #192	@ 0xc0
 80028fe:	029b      	lsls	r3, r3, #10
 8002900:	429a      	cmp	r2, r3
 8002902:	d10c      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002904:	4b38      	ldr	r3, [pc, #224]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a3c      	ldr	r2, [pc, #240]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	23c0      	movs	r3, #192	@ 0xc0
 8002914:	039b      	lsls	r3, r3, #14
 8002916:	401a      	ands	r2, r3
 8002918:	4b33      	ldr	r3, [pc, #204]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	4b32      	ldr	r3, [pc, #200]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002920:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	23c0      	movs	r3, #192	@ 0xc0
 8002928:	029b      	lsls	r3, r3, #10
 800292a:	401a      	ands	r2, r3
 800292c:	4b2e      	ldr	r3, [pc, #184]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800292e:	430a      	orrs	r2, r1
 8002930:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002932:	2317      	movs	r3, #23
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d105      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293c:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800293e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002940:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002942:	492f      	ldr	r1, [pc, #188]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002944:	400a      	ands	r2, r1
 8002946:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	d009      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002952:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002956:	2203      	movs	r2, #3
 8002958:	4393      	bics	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002962:	430a      	orrs	r2, r1
 8002964:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002970:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002974:	220c      	movs	r2, #12
 8002976:	4393      	bics	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	4b1a      	ldr	r3, [pc, #104]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002980:	430a      	orrs	r2, r1
 8002982:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2204      	movs	r2, #4
 800298a:	4013      	ands	r3, r2
 800298c:	d009      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800298e:	4b16      	ldr	r3, [pc, #88]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	4a1c      	ldr	r2, [pc, #112]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002994:	4013      	ands	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	4b12      	ldr	r3, [pc, #72]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800299e:	430a      	orrs	r2, r1
 80029a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2208      	movs	r2, #8
 80029a8:	4013      	ands	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ac:	4b0e      	ldr	r3, [pc, #56]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b0:	4a15      	ldr	r2, [pc, #84]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2280      	movs	r2, #128	@ 0x80
 80029c6:	4013      	ands	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80029ca:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	4a0f      	ldr	r2, [pc, #60]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	0019      	movs	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699a      	ldr	r2, [r3, #24]
 80029d8:	4b03      	ldr	r3, [pc, #12]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80029da:	430a      	orrs	r2, r1
 80029dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b006      	add	sp, #24
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40007000 	.word	0x40007000
 80029f0:	fffcffff 	.word	0xfffcffff
 80029f4:	fff7ffff 	.word	0xfff7ffff
 80029f8:	00001388 	.word	0x00001388
 80029fc:	ffcfffff 	.word	0xffcfffff
 8002a00:	efffffff 	.word	0xefffffff
 8002a04:	fffff3ff 	.word	0xfffff3ff
 8002a08:	ffffcfff 	.word	0xffffcfff
 8002a0c:	fff3ffff 	.word	0xfff3ffff

08002a10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e032      	b.n	8002a88 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2239      	movs	r2, #57	@ 0x39
 8002a26:	5c9b      	ldrb	r3, [r3, r2]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2238      	movs	r2, #56	@ 0x38
 8002a32:	2100      	movs	r1, #0
 8002a34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7fe f8d9 	bl	8000bf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2239      	movs	r2, #57	@ 0x39
 8002a42:	2102      	movs	r1, #2
 8002a44:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	0019      	movs	r1, r3
 8002a50:	0010      	movs	r0, r2
 8002a52:	f000 f8e3 	bl	8002c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	223e      	movs	r2, #62	@ 0x3e
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	223a      	movs	r2, #58	@ 0x3a
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	223b      	movs	r2, #59	@ 0x3b
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	223c      	movs	r2, #60	@ 0x3c
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	223d      	movs	r2, #61	@ 0x3d
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2239      	movs	r2, #57	@ 0x39
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2317      	movs	r3, #23
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2238      	movs	r2, #56	@ 0x38
 8002aa8:	5c9b      	ldrb	r3, [r3, r2]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e0ad      	b.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2238      	movs	r2, #56	@ 0x38
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0c      	cmp	r3, #12
 8002abe:	d100      	bne.n	8002ac2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002ac0:	e076      	b.n	8002bb0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d900      	bls.n	8002aca <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002ac8:	e095      	b.n	8002bf6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d04e      	beq.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0xde>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d900      	bls.n	8002ad8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002ad6:	e08e      	b.n	8002bf6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d021      	beq.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002ae4:	e087      	b.n	8002bf6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	0011      	movs	r1, r2
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f8e8 	bl	8002cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2108      	movs	r1, #8
 8002b00:	430a      	orrs	r2, r1
 8002b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2104      	movs	r1, #4
 8002b10:	438a      	bics	r2, r1
 8002b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6999      	ldr	r1, [r3, #24]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	619a      	str	r2, [r3, #24]
      break;
 8002b26:	e06b      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	0011      	movs	r1, r2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 f903 	bl	8002d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2180      	movs	r1, #128	@ 0x80
 8002b42:	0109      	lsls	r1, r1, #4
 8002b44:	430a      	orrs	r2, r1
 8002b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4931      	ldr	r1, [pc, #196]	@ (8002c18 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b54:	400a      	ands	r2, r1
 8002b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6999      	ldr	r1, [r3, #24]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	021a      	lsls	r2, r3, #8
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	619a      	str	r2, [r3, #24]
      break;
 8002b6c:	e048      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	0011      	movs	r1, r2
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 f922 	bl	8002dc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2108      	movs	r1, #8
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2104      	movs	r1, #4
 8002b98:	438a      	bics	r2, r1
 8002b9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69d9      	ldr	r1, [r3, #28]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	61da      	str	r2, [r3, #28]
      break;
 8002bae:	e027      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 f941 	bl	8002e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2180      	movs	r1, #128	@ 0x80
 8002bca:	0109      	lsls	r1, r1, #4
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	490f      	ldr	r1, [pc, #60]	@ (8002c18 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002bdc:	400a      	ands	r2, r1
 8002bde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69d9      	ldr	r1, [r3, #28]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	61da      	str	r2, [r3, #28]
      break;
 8002bf4:	e004      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002bf6:	2317      	movs	r3, #23
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
      break;
 8002bfe:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2238      	movs	r2, #56	@ 0x38
 8002c04:	2100      	movs	r1, #0
 8002c06:	5499      	strb	r1, [r3, r2]

  return status;
 8002c08:	2317      	movs	r3, #23
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	781b      	ldrb	r3, [r3, #0]
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b006      	add	sp, #24
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			@ (mov r8, r8)
 8002c18:	fffffbff 	.word	0xfffffbff

08002c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	2380      	movs	r3, #128	@ 0x80
 8002c30:	05db      	lsls	r3, r3, #23
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d007      	beq.n	8002c46 <TIM_Base_SetConfig+0x2a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb8 <TIM_Base_SetConfig+0x9c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <TIM_Base_SetConfig+0x2a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1e      	ldr	r2, [pc, #120]	@ (8002cbc <TIM_Base_SetConfig+0xa0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d108      	bne.n	8002c58 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2270      	movs	r2, #112	@ 0x70
 8002c4a:	4393      	bics	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	05db      	lsls	r3, r3, #23
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d007      	beq.n	8002c72 <TIM_Base_SetConfig+0x56>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <TIM_Base_SetConfig+0x9c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d003      	beq.n	8002c72 <TIM_Base_SetConfig+0x56>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <TIM_Base_SetConfig+0xa0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d108      	bne.n	8002c84 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <TIM_Base_SetConfig+0xa4>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2280      	movs	r2, #128	@ 0x80
 8002c88:	4393      	bics	r3, r2
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	615a      	str	r2, [r3, #20]
}
 8002cb0:	46c0      	nop			@ (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b004      	add	sp, #16
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40010800 	.word	0x40010800
 8002cbc:	40011400 	.word	0x40011400
 8002cc0:	fffffcff 	.word	0xfffffcff

08002cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	001a      	movs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2270      	movs	r2, #112	@ 0x70
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	4393      	bics	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	621a      	str	r2, [r3, #32]
}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b006      	add	sp, #24
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	001a      	movs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <TIM_OC2_SetConfig+0x7c>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <TIM_OC2_SetConfig+0x80>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2220      	movs	r2, #32
 8002d86:	4393      	bics	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	46c0      	nop			@ (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b006      	add	sp, #24
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	ffff8fff 	.word	0xffff8fff
 8002dbc:	fffffcff 	.word	0xfffffcff

08002dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <TIM_OC3_SetConfig+0x78>)
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2270      	movs	r2, #112	@ 0x70
 8002dec:	4393      	bics	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2203      	movs	r2, #3
 8002df4:	4393      	bics	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	4a0d      	ldr	r2, [pc, #52]	@ (8002e3c <TIM_OC3_SetConfig+0x7c>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	621a      	str	r2, [r3, #32]
}
 8002e30:	46c0      	nop			@ (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b006      	add	sp, #24
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	fffffeff 	.word	0xfffffeff
 8002e3c:	fffffdff 	.word	0xfffffdff

08002e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ebc <TIM_OC4_SetConfig+0x7c>)
 8002e50:	401a      	ands	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <TIM_OC4_SetConfig+0x80>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a14      	ldr	r2, [pc, #80]	@ (8002ec4 <TIM_OC4_SetConfig+0x84>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	4a10      	ldr	r2, [pc, #64]	@ (8002ec8 <TIM_OC4_SetConfig+0x88>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	031b      	lsls	r3, r3, #12
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	621a      	str	r2, [r3, #32]
}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b006      	add	sp, #24
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	ffffefff 	.word	0xffffefff
 8002ec0:	ffff8fff 	.word	0xffff8fff
 8002ec4:	fffffcff 	.word	0xfffffcff
 8002ec8:	ffffdfff 	.word	0xffffdfff

08002ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2238      	movs	r2, #56	@ 0x38
 8002eda:	5c9b      	ldrb	r3, [r3, r2]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e042      	b.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2238      	movs	r2, #56	@ 0x38
 8002ee8:	2101      	movs	r1, #1
 8002eea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2239      	movs	r2, #57	@ 0x39
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2270      	movs	r2, #112	@ 0x70
 8002f08:	4393      	bics	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	2380      	movs	r3, #128	@ 0x80
 8002f24:	05db      	lsls	r3, r3, #23
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d009      	beq.n	8002f3e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a11      	ldr	r2, [pc, #68]	@ (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0f      	ldr	r2, [pc, #60]	@ (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10c      	bne.n	8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2280      	movs	r2, #128	@ 0x80
 8002f42:	4393      	bics	r3, r2
 8002f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2239      	movs	r2, #57	@ 0x39
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2238      	movs	r2, #56	@ 0x38
 8002f64:	2100      	movs	r1, #0
 8002f66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b004      	add	sp, #16
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	40010800 	.word	0x40010800
 8002f78:	40011400 	.word	0x40011400

08002f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e044      	b.n	8003018 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2278      	movs	r2, #120	@ 0x78
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7fd ff11 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2224      	movs	r2, #36	@ 0x24
 8002faa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 fb2e 	bl	8003620 <UART_SetConfig>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e024      	b.n	8003018 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 fda5 	bl	8003b28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	490d      	ldr	r1, [pc, #52]	@ (8003020 <HAL_UART_Init+0xa4>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	212a      	movs	r1, #42	@ 0x2a
 8002ffa:	438a      	bics	r2, r1
 8002ffc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f000 fe3d 	bl	8003c90 <UART_CheckIdleState>
 8003016:	0003      	movs	r3, r0
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	b002      	add	sp, #8
 800301e:	bd80      	pop	{r7, pc}
 8003020:	ffffb7ff 	.word	0xffffb7ff

08003024 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b0ab      	sub	sp, #172	@ 0xac
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	22a4      	movs	r2, #164	@ 0xa4
 8003034:	18b9      	adds	r1, r7, r2
 8003036:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	20a0      	movs	r0, #160	@ 0xa0
 8003040:	1839      	adds	r1, r7, r0
 8003042:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	219c      	movs	r1, #156	@ 0x9c
 800304c:	1879      	adds	r1, r7, r1
 800304e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003050:	0011      	movs	r1, r2
 8003052:	18bb      	adds	r3, r7, r2
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a99      	ldr	r2, [pc, #612]	@ (80032bc <HAL_UART_IRQHandler+0x298>)
 8003058:	4013      	ands	r3, r2
 800305a:	2298      	movs	r2, #152	@ 0x98
 800305c:	18bc      	adds	r4, r7, r2
 800305e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003060:	18bb      	adds	r3, r7, r2
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d114      	bne.n	8003092 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003068:	187b      	adds	r3, r7, r1
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2220      	movs	r2, #32
 800306e:	4013      	ands	r3, r2
 8003070:	d00f      	beq.n	8003092 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003072:	183b      	adds	r3, r7, r0
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2220      	movs	r2, #32
 8003078:	4013      	ands	r3, r2
 800307a:	d00a      	beq.n	8003092 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003080:	2b00      	cmp	r3, #0
 8003082:	d100      	bne.n	8003086 <HAL_UART_IRQHandler+0x62>
 8003084:	e2a0      	b.n	80035c8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	0010      	movs	r0, r2
 800308e:	4798      	blx	r3
      }
      return;
 8003090:	e29a      	b.n	80035c8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003092:	2398      	movs	r3, #152	@ 0x98
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d100      	bne.n	800309e <HAL_UART_IRQHandler+0x7a>
 800309c:	e114      	b.n	80032c8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800309e:	239c      	movs	r3, #156	@ 0x9c
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2201      	movs	r2, #1
 80030a6:	4013      	ands	r3, r2
 80030a8:	d106      	bne.n	80030b8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030aa:	23a0      	movs	r3, #160	@ 0xa0
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a83      	ldr	r2, [pc, #524]	@ (80032c0 <HAL_UART_IRQHandler+0x29c>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	d100      	bne.n	80030b8 <HAL_UART_IRQHandler+0x94>
 80030b6:	e107      	b.n	80032c8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030b8:	23a4      	movs	r3, #164	@ 0xa4
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2201      	movs	r2, #1
 80030c0:	4013      	ands	r3, r2
 80030c2:	d012      	beq.n	80030ea <HAL_UART_IRQHandler+0xc6>
 80030c4:	23a0      	movs	r3, #160	@ 0xa0
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4013      	ands	r3, r2
 80030d0:	d00b      	beq.n	80030ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2201      	movs	r2, #1
 80030d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2284      	movs	r2, #132	@ 0x84
 80030de:	589b      	ldr	r3, [r3, r2]
 80030e0:	2201      	movs	r2, #1
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2184      	movs	r1, #132	@ 0x84
 80030e8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ea:	23a4      	movs	r3, #164	@ 0xa4
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2202      	movs	r2, #2
 80030f2:	4013      	ands	r3, r2
 80030f4:	d011      	beq.n	800311a <HAL_UART_IRQHandler+0xf6>
 80030f6:	239c      	movs	r3, #156	@ 0x9c
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2201      	movs	r2, #1
 80030fe:	4013      	ands	r3, r2
 8003100:	d00b      	beq.n	800311a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2202      	movs	r2, #2
 8003108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2284      	movs	r2, #132	@ 0x84
 800310e:	589b      	ldr	r3, [r3, r2]
 8003110:	2204      	movs	r2, #4
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2184      	movs	r1, #132	@ 0x84
 8003118:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800311a:	23a4      	movs	r3, #164	@ 0xa4
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2204      	movs	r2, #4
 8003122:	4013      	ands	r3, r2
 8003124:	d011      	beq.n	800314a <HAL_UART_IRQHandler+0x126>
 8003126:	239c      	movs	r3, #156	@ 0x9c
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
 8003130:	d00b      	beq.n	800314a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2204      	movs	r2, #4
 8003138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2284      	movs	r2, #132	@ 0x84
 800313e:	589b      	ldr	r3, [r3, r2]
 8003140:	2202      	movs	r2, #2
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2184      	movs	r1, #132	@ 0x84
 8003148:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800314a:	23a4      	movs	r3, #164	@ 0xa4
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2208      	movs	r2, #8
 8003152:	4013      	ands	r3, r2
 8003154:	d017      	beq.n	8003186 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003156:	23a0      	movs	r3, #160	@ 0xa0
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2220      	movs	r2, #32
 800315e:	4013      	ands	r3, r2
 8003160:	d105      	bne.n	800316e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003162:	239c      	movs	r3, #156	@ 0x9c
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2201      	movs	r2, #1
 800316a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800316c:	d00b      	beq.n	8003186 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2208      	movs	r2, #8
 8003174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2284      	movs	r2, #132	@ 0x84
 800317a:	589b      	ldr	r3, [r3, r2]
 800317c:	2208      	movs	r2, #8
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2184      	movs	r1, #132	@ 0x84
 8003184:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003186:	23a4      	movs	r3, #164	@ 0xa4
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	4013      	ands	r3, r2
 8003192:	d013      	beq.n	80031bc <HAL_UART_IRQHandler+0x198>
 8003194:	23a0      	movs	r3, #160	@ 0xa0
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	2380      	movs	r3, #128	@ 0x80
 800319c:	04db      	lsls	r3, r3, #19
 800319e:	4013      	ands	r3, r2
 80031a0:	d00c      	beq.n	80031bc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2280      	movs	r2, #128	@ 0x80
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2284      	movs	r2, #132	@ 0x84
 80031b0:	589b      	ldr	r3, [r3, r2]
 80031b2:	2220      	movs	r2, #32
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2184      	movs	r1, #132	@ 0x84
 80031ba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2284      	movs	r2, #132	@ 0x84
 80031c0:	589b      	ldr	r3, [r3, r2]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d100      	bne.n	80031c8 <HAL_UART_IRQHandler+0x1a4>
 80031c6:	e201      	b.n	80035cc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031c8:	23a4      	movs	r3, #164	@ 0xa4
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2220      	movs	r2, #32
 80031d0:	4013      	ands	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031d4:	23a0      	movs	r3, #160	@ 0xa0
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2220      	movs	r2, #32
 80031dc:	4013      	ands	r3, r2
 80031de:	d008      	beq.n	80031f2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	0010      	movs	r0, r2
 80031f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2284      	movs	r2, #132	@ 0x84
 80031f6:	589b      	ldr	r3, [r3, r2]
 80031f8:	2194      	movs	r1, #148	@ 0x94
 80031fa:	187a      	adds	r2, r7, r1
 80031fc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2240      	movs	r2, #64	@ 0x40
 8003206:	4013      	ands	r3, r2
 8003208:	2b40      	cmp	r3, #64	@ 0x40
 800320a:	d004      	beq.n	8003216 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800320c:	187b      	adds	r3, r7, r1
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2228      	movs	r2, #40	@ 0x28
 8003212:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003214:	d047      	beq.n	80032a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 fe4b 	bl	8003eb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2240      	movs	r2, #64	@ 0x40
 8003226:	4013      	ands	r3, r2
 8003228:	2b40      	cmp	r3, #64	@ 0x40
 800322a:	d137      	bne.n	800329c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322c:	f3ef 8310 	mrs	r3, PRIMASK
 8003230:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003234:	2090      	movs	r0, #144	@ 0x90
 8003236:	183a      	adds	r2, r7, r0
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	2301      	movs	r3, #1
 800323c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003240:	f383 8810 	msr	PRIMASK, r3
}
 8003244:	46c0      	nop			@ (mov r8, r8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2140      	movs	r1, #64	@ 0x40
 8003252:	438a      	bics	r2, r1
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	183b      	adds	r3, r7, r0
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800325e:	f383 8810 	msr	PRIMASK, r3
}
 8003262:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003270:	4a14      	ldr	r2, [pc, #80]	@ (80032c4 <HAL_UART_IRQHandler+0x2a0>)
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003278:	0018      	movs	r0, r3
 800327a:	f7fe f9f7 	bl	800166c <HAL_DMA_Abort_IT>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d01a      	beq.n	80032b8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328c:	0018      	movs	r0, r3
 800328e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	e012      	b.n	80032b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 f9af 	bl	80035f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329a:	e00d      	b.n	80032b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 f9aa 	bl	80035f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	e008      	b.n	80032b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 f9a5 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2284      	movs	r2, #132	@ 0x84
 80032b2:	2100      	movs	r1, #0
 80032b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80032b6:	e189      	b.n	80035cc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	46c0      	nop			@ (mov r8, r8)
    return;
 80032ba:	e187      	b.n	80035cc <HAL_UART_IRQHandler+0x5a8>
 80032bc:	0000080f 	.word	0x0000080f
 80032c0:	04000120 	.word	0x04000120
 80032c4:	08003f7d 	.word	0x08003f7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d000      	beq.n	80032d2 <HAL_UART_IRQHandler+0x2ae>
 80032d0:	e13b      	b.n	800354a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032d2:	23a4      	movs	r3, #164	@ 0xa4
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2210      	movs	r2, #16
 80032da:	4013      	ands	r3, r2
 80032dc:	d100      	bne.n	80032e0 <HAL_UART_IRQHandler+0x2bc>
 80032de:	e134      	b.n	800354a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032e0:	23a0      	movs	r3, #160	@ 0xa0
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2210      	movs	r2, #16
 80032e8:	4013      	ands	r3, r2
 80032ea:	d100      	bne.n	80032ee <HAL_UART_IRQHandler+0x2ca>
 80032ec:	e12d      	b.n	800354a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2210      	movs	r2, #16
 80032f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2240      	movs	r2, #64	@ 0x40
 80032fe:	4013      	ands	r3, r2
 8003300:	2b40      	cmp	r3, #64	@ 0x40
 8003302:	d000      	beq.n	8003306 <HAL_UART_IRQHandler+0x2e2>
 8003304:	e0a1      	b.n	800344a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	217e      	movs	r1, #126	@ 0x7e
 8003310:	187b      	adds	r3, r7, r1
 8003312:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003314:	187b      	adds	r3, r7, r1
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d100      	bne.n	800331e <HAL_UART_IRQHandler+0x2fa>
 800331c:	e158      	b.n	80035d0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2258      	movs	r2, #88	@ 0x58
 8003322:	5a9b      	ldrh	r3, [r3, r2]
 8003324:	187a      	adds	r2, r7, r1
 8003326:	8812      	ldrh	r2, [r2, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d300      	bcc.n	800332e <HAL_UART_IRQHandler+0x30a>
 800332c:	e150      	b.n	80035d0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	187a      	adds	r2, r7, r1
 8003332:	215a      	movs	r1, #90	@ 0x5a
 8003334:	8812      	ldrh	r2, [r2, #0]
 8003336:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2220      	movs	r2, #32
 8003342:	4013      	ands	r3, r2
 8003344:	d16f      	bne.n	8003426 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003346:	f3ef 8310 	mrs	r3, PRIMASK
 800334a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800334e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003350:	2301      	movs	r3, #1
 8003352:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003356:	f383 8810 	msr	PRIMASK, r3
}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	499e      	ldr	r1, [pc, #632]	@ (80035e0 <HAL_UART_IRQHandler+0x5bc>)
 8003368:	400a      	ands	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800336e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003378:	f3ef 8310 	mrs	r3, PRIMASK
 800337c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800337e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003380:	677b      	str	r3, [r7, #116]	@ 0x74
 8003382:	2301      	movs	r3, #1
 8003384:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003388:	f383 8810 	msr	PRIMASK, r3
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	438a      	bics	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033a0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033aa:	f3ef 8310 	mrs	r3, PRIMASK
 80033ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80033b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80033b4:	2301      	movs	r3, #1
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2140      	movs	r1, #64	@ 0x40
 80033cc:	438a      	bics	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033d2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033d6:	f383 8810 	msr	PRIMASK, r3
}
 80033da:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2280      	movs	r2, #128	@ 0x80
 80033e0:	2120      	movs	r1, #32
 80033e2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ea:	f3ef 8310 	mrs	r3, PRIMASK
 80033ee:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80033f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033f4:	2301      	movs	r3, #1
 80033f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033fa:	f383 8810 	msr	PRIMASK, r3
}
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2110      	movs	r1, #16
 800340c:	438a      	bics	r2, r1
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003412:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003416:	f383 8810 	msr	PRIMASK, r3
}
 800341a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003420:	0018      	movs	r0, r3
 8003422:	f7fe f8e3 	bl	80015ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2258      	movs	r2, #88	@ 0x58
 8003430:	5a9a      	ldrh	r2, [r3, r2]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	215a      	movs	r1, #90	@ 0x5a
 8003436:	5a5b      	ldrh	r3, [r3, r1]
 8003438:	b29b      	uxth	r3, r3
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0011      	movs	r1, r2
 8003442:	0018      	movs	r0, r3
 8003444:	f000 f8e0 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003448:	e0c2      	b.n	80035d0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2258      	movs	r2, #88	@ 0x58
 800344e:	5a99      	ldrh	r1, [r3, r2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	225a      	movs	r2, #90	@ 0x5a
 8003454:	5a9b      	ldrh	r3, [r3, r2]
 8003456:	b29a      	uxth	r2, r3
 8003458:	208e      	movs	r0, #142	@ 0x8e
 800345a:	183b      	adds	r3, r7, r0
 800345c:	1a8a      	subs	r2, r1, r2
 800345e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	225a      	movs	r2, #90	@ 0x5a
 8003464:	5a9b      	ldrh	r3, [r3, r2]
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d100      	bne.n	800346e <HAL_UART_IRQHandler+0x44a>
 800346c:	e0b2      	b.n	80035d4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800346e:	183b      	adds	r3, r7, r0
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d100      	bne.n	8003478 <HAL_UART_IRQHandler+0x454>
 8003476:	e0ad      	b.n	80035d4 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003478:	f3ef 8310 	mrs	r3, PRIMASK
 800347c:	60fb      	str	r3, [r7, #12]
  return(result);
 800347e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003480:	2488      	movs	r4, #136	@ 0x88
 8003482:	193a      	adds	r2, r7, r4
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	2301      	movs	r3, #1
 8003488:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f383 8810 	msr	PRIMASK, r3
}
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4951      	ldr	r1, [pc, #324]	@ (80035e4 <HAL_UART_IRQHandler+0x5c0>)
 800349e:	400a      	ands	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	193b      	adds	r3, r7, r4
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f383 8810 	msr	PRIMASK, r3
}
 80034ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b0:	f3ef 8310 	mrs	r3, PRIMASK
 80034b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80034b6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b8:	2484      	movs	r4, #132	@ 0x84
 80034ba:	193a      	adds	r2, r7, r4
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	2301      	movs	r3, #1
 80034c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f383 8810 	msr	PRIMASK, r3
}
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	438a      	bics	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	193b      	adds	r3, r7, r4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	f383 8810 	msr	PRIMASK, r3
}
 80034e6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2280      	movs	r2, #128	@ 0x80
 80034ec:	2120      	movs	r1, #32
 80034ee:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003504:	2480      	movs	r4, #128	@ 0x80
 8003506:	193a      	adds	r2, r7, r4
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	2301      	movs	r3, #1
 800350c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003510:	f383 8810 	msr	PRIMASK, r3
}
 8003514:	46c0      	nop			@ (mov r8, r8)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2110      	movs	r1, #16
 8003522:	438a      	bics	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	193b      	adds	r3, r7, r4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352e:	f383 8810 	msr	PRIMASK, r3
}
 8003532:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800353a:	183b      	adds	r3, r7, r0
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	0011      	movs	r1, r2
 8003542:	0018      	movs	r0, r3
 8003544:	f000 f860 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003548:	e044      	b.n	80035d4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800354a:	23a4      	movs	r3, #164	@ 0xa4
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	2380      	movs	r3, #128	@ 0x80
 8003552:	035b      	lsls	r3, r3, #13
 8003554:	4013      	ands	r3, r2
 8003556:	d010      	beq.n	800357a <HAL_UART_IRQHandler+0x556>
 8003558:	239c      	movs	r3, #156	@ 0x9c
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	2380      	movs	r3, #128	@ 0x80
 8003560:	03db      	lsls	r3, r3, #15
 8003562:	4013      	ands	r3, r2
 8003564:	d009      	beq.n	800357a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2280      	movs	r2, #128	@ 0x80
 800356c:	0352      	lsls	r2, r2, #13
 800356e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 fd44 	bl	8004000 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003578:	e02f      	b.n	80035da <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800357a:	23a4      	movs	r3, #164	@ 0xa4
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2280      	movs	r2, #128	@ 0x80
 8003582:	4013      	ands	r3, r2
 8003584:	d00f      	beq.n	80035a6 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003586:	23a0      	movs	r3, #160	@ 0xa0
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2280      	movs	r2, #128	@ 0x80
 800358e:	4013      	ands	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01e      	beq.n	80035d8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	0010      	movs	r0, r2
 80035a2:	4798      	blx	r3
    }
    return;
 80035a4:	e018      	b.n	80035d8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035a6:	23a4      	movs	r3, #164	@ 0xa4
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2240      	movs	r2, #64	@ 0x40
 80035ae:	4013      	ands	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_UART_IRQHandler+0x5b6>
 80035b2:	23a0      	movs	r3, #160	@ 0xa0
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2240      	movs	r2, #64	@ 0x40
 80035ba:	4013      	ands	r3, r2
 80035bc:	d00d      	beq.n	80035da <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 fcf2 	bl	8003faa <UART_EndTransmit_IT>
    return;
 80035c6:	e008      	b.n	80035da <HAL_UART_IRQHandler+0x5b6>
      return;
 80035c8:	46c0      	nop			@ (mov r8, r8)
 80035ca:	e006      	b.n	80035da <HAL_UART_IRQHandler+0x5b6>
    return;
 80035cc:	46c0      	nop			@ (mov r8, r8)
 80035ce:	e004      	b.n	80035da <HAL_UART_IRQHandler+0x5b6>
      return;
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	e002      	b.n	80035da <HAL_UART_IRQHandler+0x5b6>
      return;
 80035d4:	46c0      	nop			@ (mov r8, r8)
 80035d6:	e000      	b.n	80035da <HAL_UART_IRQHandler+0x5b6>
    return;
 80035d8:	46c0      	nop			@ (mov r8, r8)
  }

}
 80035da:	46bd      	mov	sp, r7
 80035dc:	b02b      	add	sp, #172	@ 0xac
 80035de:	bd90      	pop	{r4, r7, pc}
 80035e0:	fffffeff 	.word	0xfffffeff
 80035e4:	fffffedf 	.word	0xfffffedf

080035e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035f0:	46c0      	nop			@ (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003600:	46c0      	nop			@ (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	000a      	movs	r2, r1
 8003612:	1cbb      	adds	r3, r7, #2
 8003614:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b08e      	sub	sp, #56	@ 0x38
 8003624:	af00      	add	r7, sp, #0
 8003626:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003628:	231a      	movs	r3, #26
 800362a:	2218      	movs	r2, #24
 800362c:	189b      	adds	r3, r3, r2
 800362e:	19db      	adds	r3, r3, r7
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	431a      	orrs	r2, r3
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	431a      	orrs	r2, r3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	4313      	orrs	r3, r2
 800364a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4ac6      	ldr	r2, [pc, #792]	@ (800396c <UART_SetConfig+0x34c>)
 8003654:	4013      	ands	r3, r2
 8003656:	0019      	movs	r1, r3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800365e:	430a      	orrs	r2, r1
 8003660:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4ac1      	ldr	r2, [pc, #772]	@ (8003970 <UART_SetConfig+0x350>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4abb      	ldr	r2, [pc, #748]	@ (8003974 <UART_SetConfig+0x354>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003690:	4313      	orrs	r3, r2
 8003692:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	4ab7      	ldr	r2, [pc, #732]	@ (8003978 <UART_SetConfig+0x358>)
 800369c:	4013      	ands	r3, r2
 800369e:	0019      	movs	r1, r3
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4ab3      	ldr	r2, [pc, #716]	@ (800397c <UART_SetConfig+0x35c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d131      	bne.n	8003718 <UART_SetConfig+0xf8>
 80036b4:	4bb2      	ldr	r3, [pc, #712]	@ (8003980 <UART_SetConfig+0x360>)
 80036b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b8:	2203      	movs	r2, #3
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d01d      	beq.n	80036fc <UART_SetConfig+0xdc>
 80036c0:	d823      	bhi.n	800370a <UART_SetConfig+0xea>
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d00c      	beq.n	80036e0 <UART_SetConfig+0xc0>
 80036c6:	d820      	bhi.n	800370a <UART_SetConfig+0xea>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <UART_SetConfig+0xb2>
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d00e      	beq.n	80036ee <UART_SetConfig+0xce>
 80036d0:	e01b      	b.n	800370a <UART_SetConfig+0xea>
 80036d2:	231b      	movs	r3, #27
 80036d4:	2218      	movs	r2, #24
 80036d6:	189b      	adds	r3, r3, r2
 80036d8:	19db      	adds	r3, r3, r7
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e09c      	b.n	800381a <UART_SetConfig+0x1fa>
 80036e0:	231b      	movs	r3, #27
 80036e2:	2218      	movs	r2, #24
 80036e4:	189b      	adds	r3, r3, r2
 80036e6:	19db      	adds	r3, r3, r7
 80036e8:	2202      	movs	r2, #2
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e095      	b.n	800381a <UART_SetConfig+0x1fa>
 80036ee:	231b      	movs	r3, #27
 80036f0:	2218      	movs	r2, #24
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	19db      	adds	r3, r3, r7
 80036f6:	2204      	movs	r2, #4
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e08e      	b.n	800381a <UART_SetConfig+0x1fa>
 80036fc:	231b      	movs	r3, #27
 80036fe:	2218      	movs	r2, #24
 8003700:	189b      	adds	r3, r3, r2
 8003702:	19db      	adds	r3, r3, r7
 8003704:	2208      	movs	r2, #8
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	e087      	b.n	800381a <UART_SetConfig+0x1fa>
 800370a:	231b      	movs	r3, #27
 800370c:	2218      	movs	r2, #24
 800370e:	189b      	adds	r3, r3, r2
 8003710:	19db      	adds	r3, r3, r7
 8003712:	2210      	movs	r2, #16
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e080      	b.n	800381a <UART_SetConfig+0x1fa>
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a99      	ldr	r2, [pc, #612]	@ (8003984 <UART_SetConfig+0x364>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d131      	bne.n	8003786 <UART_SetConfig+0x166>
 8003722:	4b97      	ldr	r3, [pc, #604]	@ (8003980 <UART_SetConfig+0x360>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003726:	220c      	movs	r2, #12
 8003728:	4013      	ands	r3, r2
 800372a:	2b0c      	cmp	r3, #12
 800372c:	d01d      	beq.n	800376a <UART_SetConfig+0x14a>
 800372e:	d823      	bhi.n	8003778 <UART_SetConfig+0x158>
 8003730:	2b08      	cmp	r3, #8
 8003732:	d00c      	beq.n	800374e <UART_SetConfig+0x12e>
 8003734:	d820      	bhi.n	8003778 <UART_SetConfig+0x158>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <UART_SetConfig+0x120>
 800373a:	2b04      	cmp	r3, #4
 800373c:	d00e      	beq.n	800375c <UART_SetConfig+0x13c>
 800373e:	e01b      	b.n	8003778 <UART_SetConfig+0x158>
 8003740:	231b      	movs	r3, #27
 8003742:	2218      	movs	r2, #24
 8003744:	189b      	adds	r3, r3, r2
 8003746:	19db      	adds	r3, r3, r7
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	e065      	b.n	800381a <UART_SetConfig+0x1fa>
 800374e:	231b      	movs	r3, #27
 8003750:	2218      	movs	r2, #24
 8003752:	189b      	adds	r3, r3, r2
 8003754:	19db      	adds	r3, r3, r7
 8003756:	2202      	movs	r2, #2
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e05e      	b.n	800381a <UART_SetConfig+0x1fa>
 800375c:	231b      	movs	r3, #27
 800375e:	2218      	movs	r2, #24
 8003760:	189b      	adds	r3, r3, r2
 8003762:	19db      	adds	r3, r3, r7
 8003764:	2204      	movs	r2, #4
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e057      	b.n	800381a <UART_SetConfig+0x1fa>
 800376a:	231b      	movs	r3, #27
 800376c:	2218      	movs	r2, #24
 800376e:	189b      	adds	r3, r3, r2
 8003770:	19db      	adds	r3, r3, r7
 8003772:	2208      	movs	r2, #8
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e050      	b.n	800381a <UART_SetConfig+0x1fa>
 8003778:	231b      	movs	r3, #27
 800377a:	2218      	movs	r2, #24
 800377c:	189b      	adds	r3, r3, r2
 800377e:	19db      	adds	r3, r3, r7
 8003780:	2210      	movs	r2, #16
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	e049      	b.n	800381a <UART_SetConfig+0x1fa>
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7a      	ldr	r2, [pc, #488]	@ (8003974 <UART_SetConfig+0x354>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d13e      	bne.n	800380e <UART_SetConfig+0x1ee>
 8003790:	4b7b      	ldr	r3, [pc, #492]	@ (8003980 <UART_SetConfig+0x360>)
 8003792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003794:	23c0      	movs	r3, #192	@ 0xc0
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	4013      	ands	r3, r2
 800379a:	22c0      	movs	r2, #192	@ 0xc0
 800379c:	0112      	lsls	r2, r2, #4
 800379e:	4293      	cmp	r3, r2
 80037a0:	d027      	beq.n	80037f2 <UART_SetConfig+0x1d2>
 80037a2:	22c0      	movs	r2, #192	@ 0xc0
 80037a4:	0112      	lsls	r2, r2, #4
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d82a      	bhi.n	8003800 <UART_SetConfig+0x1e0>
 80037aa:	2280      	movs	r2, #128	@ 0x80
 80037ac:	0112      	lsls	r2, r2, #4
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d011      	beq.n	80037d6 <UART_SetConfig+0x1b6>
 80037b2:	2280      	movs	r2, #128	@ 0x80
 80037b4:	0112      	lsls	r2, r2, #4
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d822      	bhi.n	8003800 <UART_SetConfig+0x1e0>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <UART_SetConfig+0x1a8>
 80037be:	2280      	movs	r2, #128	@ 0x80
 80037c0:	00d2      	lsls	r2, r2, #3
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <UART_SetConfig+0x1c4>
 80037c6:	e01b      	b.n	8003800 <UART_SetConfig+0x1e0>
 80037c8:	231b      	movs	r3, #27
 80037ca:	2218      	movs	r2, #24
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	19db      	adds	r3, r3, r7
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e021      	b.n	800381a <UART_SetConfig+0x1fa>
 80037d6:	231b      	movs	r3, #27
 80037d8:	2218      	movs	r2, #24
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	19db      	adds	r3, r3, r7
 80037de:	2202      	movs	r2, #2
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e01a      	b.n	800381a <UART_SetConfig+0x1fa>
 80037e4:	231b      	movs	r3, #27
 80037e6:	2218      	movs	r2, #24
 80037e8:	189b      	adds	r3, r3, r2
 80037ea:	19db      	adds	r3, r3, r7
 80037ec:	2204      	movs	r2, #4
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e013      	b.n	800381a <UART_SetConfig+0x1fa>
 80037f2:	231b      	movs	r3, #27
 80037f4:	2218      	movs	r2, #24
 80037f6:	189b      	adds	r3, r3, r2
 80037f8:	19db      	adds	r3, r3, r7
 80037fa:	2208      	movs	r2, #8
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	e00c      	b.n	800381a <UART_SetConfig+0x1fa>
 8003800:	231b      	movs	r3, #27
 8003802:	2218      	movs	r2, #24
 8003804:	189b      	adds	r3, r3, r2
 8003806:	19db      	adds	r3, r3, r7
 8003808:	2210      	movs	r2, #16
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e005      	b.n	800381a <UART_SetConfig+0x1fa>
 800380e:	231b      	movs	r3, #27
 8003810:	2218      	movs	r2, #24
 8003812:	189b      	adds	r3, r3, r2
 8003814:	19db      	adds	r3, r3, r7
 8003816:	2210      	movs	r2, #16
 8003818:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a55      	ldr	r2, [pc, #340]	@ (8003974 <UART_SetConfig+0x354>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d000      	beq.n	8003826 <UART_SetConfig+0x206>
 8003824:	e084      	b.n	8003930 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003826:	231b      	movs	r3, #27
 8003828:	2218      	movs	r2, #24
 800382a:	189b      	adds	r3, r3, r2
 800382c:	19db      	adds	r3, r3, r7
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d01d      	beq.n	8003870 <UART_SetConfig+0x250>
 8003834:	dc20      	bgt.n	8003878 <UART_SetConfig+0x258>
 8003836:	2b04      	cmp	r3, #4
 8003838:	d015      	beq.n	8003866 <UART_SetConfig+0x246>
 800383a:	dc1d      	bgt.n	8003878 <UART_SetConfig+0x258>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <UART_SetConfig+0x226>
 8003840:	2b02      	cmp	r3, #2
 8003842:	d005      	beq.n	8003850 <UART_SetConfig+0x230>
 8003844:	e018      	b.n	8003878 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003846:	f7fe ff7d 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 800384a:	0003      	movs	r3, r0
 800384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800384e:	e01c      	b.n	800388a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003850:	4b4b      	ldr	r3, [pc, #300]	@ (8003980 <UART_SetConfig+0x360>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	d002      	beq.n	8003860 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800385a:	4b4b      	ldr	r3, [pc, #300]	@ (8003988 <UART_SetConfig+0x368>)
 800385c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800385e:	e014      	b.n	800388a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003860:	4b4a      	ldr	r3, [pc, #296]	@ (800398c <UART_SetConfig+0x36c>)
 8003862:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003864:	e011      	b.n	800388a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003866:	f7fe febd 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800386a:	0003      	movs	r3, r0
 800386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800386e:	e00c      	b.n	800388a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003870:	2380      	movs	r3, #128	@ 0x80
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003876:	e008      	b.n	800388a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800387c:	231a      	movs	r3, #26
 800387e:	2218      	movs	r2, #24
 8003880:	189b      	adds	r3, r3, r2
 8003882:	19db      	adds	r3, r3, r7
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
        break;
 8003888:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800388a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d100      	bne.n	8003892 <UART_SetConfig+0x272>
 8003890:	e132      	b.n	8003af8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	0013      	movs	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	189b      	adds	r3, r3, r2
 800389c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800389e:	429a      	cmp	r2, r3
 80038a0:	d305      	bcc.n	80038ae <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d906      	bls.n	80038bc <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80038ae:	231a      	movs	r3, #26
 80038b0:	2218      	movs	r2, #24
 80038b2:	189b      	adds	r3, r3, r2
 80038b4:	19db      	adds	r3, r3, r7
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e11d      	b.n	8003af8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	6939      	ldr	r1, [r7, #16]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	000b      	movs	r3, r1
 80038ca:	0e1b      	lsrs	r3, r3, #24
 80038cc:	0010      	movs	r0, r2
 80038ce:	0205      	lsls	r5, r0, #8
 80038d0:	431d      	orrs	r5, r3
 80038d2:	000b      	movs	r3, r1
 80038d4:	021c      	lsls	r4, r3, #8
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68b8      	ldr	r0, [r7, #8]
 80038e4:	68f9      	ldr	r1, [r7, #12]
 80038e6:	1900      	adds	r0, r0, r4
 80038e8:	4169      	adcs	r1, r5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	2300      	movs	r3, #0
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f7fc fc92 	bl	8000220 <__aeabi_uldivmod>
 80038fc:	0002      	movs	r2, r0
 80038fe:	000b      	movs	r3, r1
 8003900:	0013      	movs	r3, r2
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003906:	23c0      	movs	r3, #192	@ 0xc0
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	429a      	cmp	r2, r3
 800390c:	d309      	bcc.n	8003922 <UART_SetConfig+0x302>
 800390e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003910:	2380      	movs	r3, #128	@ 0x80
 8003912:	035b      	lsls	r3, r3, #13
 8003914:	429a      	cmp	r2, r3
 8003916:	d204      	bcs.n	8003922 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800391e:	60da      	str	r2, [r3, #12]
 8003920:	e0ea      	b.n	8003af8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003922:	231a      	movs	r3, #26
 8003924:	2218      	movs	r2, #24
 8003926:	189b      	adds	r3, r3, r2
 8003928:	19db      	adds	r3, r3, r7
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e0e3      	b.n	8003af8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	69da      	ldr	r2, [r3, #28]
 8003934:	2380      	movs	r3, #128	@ 0x80
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	429a      	cmp	r2, r3
 800393a:	d000      	beq.n	800393e <UART_SetConfig+0x31e>
 800393c:	e085      	b.n	8003a4a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800393e:	231b      	movs	r3, #27
 8003940:	2218      	movs	r2, #24
 8003942:	189b      	adds	r3, r3, r2
 8003944:	19db      	adds	r3, r3, r7
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d837      	bhi.n	80039bc <UART_SetConfig+0x39c>
 800394c:	009a      	lsls	r2, r3, #2
 800394e:	4b10      	ldr	r3, [pc, #64]	@ (8003990 <UART_SetConfig+0x370>)
 8003950:	18d3      	adds	r3, r2, r3
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003956:	f7fe fef5 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 800395a:	0003      	movs	r3, r0
 800395c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800395e:	e036      	b.n	80039ce <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003960:	f7fe ff06 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8003964:	0003      	movs	r3, r0
 8003966:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003968:	e031      	b.n	80039ce <UART_SetConfig+0x3ae>
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	efff69f3 	.word	0xefff69f3
 8003970:	ffffcfff 	.word	0xffffcfff
 8003974:	40004800 	.word	0x40004800
 8003978:	fffff4ff 	.word	0xfffff4ff
 800397c:	40013800 	.word	0x40013800
 8003980:	40021000 	.word	0x40021000
 8003984:	40004400 	.word	0x40004400
 8003988:	003d0900 	.word	0x003d0900
 800398c:	00f42400 	.word	0x00f42400
 8003990:	080040a4 	.word	0x080040a4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003994:	4b60      	ldr	r3, [pc, #384]	@ (8003b18 <UART_SetConfig+0x4f8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2210      	movs	r2, #16
 800399a:	4013      	ands	r3, r2
 800399c:	d002      	beq.n	80039a4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800399e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b1c <UART_SetConfig+0x4fc>)
 80039a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80039a2:	e014      	b.n	80039ce <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80039a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b20 <UART_SetConfig+0x500>)
 80039a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039a8:	e011      	b.n	80039ce <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039aa:	f7fe fe1b 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80039ae:	0003      	movs	r3, r0
 80039b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039b2:	e00c      	b.n	80039ce <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b4:	2380      	movs	r3, #128	@ 0x80
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039ba:	e008      	b.n	80039ce <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80039c0:	231a      	movs	r3, #26
 80039c2:	2218      	movs	r2, #24
 80039c4:	189b      	adds	r3, r3, r2
 80039c6:	19db      	adds	r3, r3, r7
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
        break;
 80039cc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d100      	bne.n	80039d6 <UART_SetConfig+0x3b6>
 80039d4:	e090      	b.n	8003af8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d8:	005a      	lsls	r2, r3, #1
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	18d2      	adds	r2, r2, r3
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	0019      	movs	r1, r3
 80039e8:	0010      	movs	r0, r2
 80039ea:	f7fc fb8d 	bl	8000108 <__udivsi3>
 80039ee:	0003      	movs	r3, r0
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f4:	2b0f      	cmp	r3, #15
 80039f6:	d921      	bls.n	8003a3c <UART_SetConfig+0x41c>
 80039f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	025b      	lsls	r3, r3, #9
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d21c      	bcs.n	8003a3c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	200e      	movs	r0, #14
 8003a08:	2418      	movs	r4, #24
 8003a0a:	1903      	adds	r3, r0, r4
 8003a0c:	19db      	adds	r3, r3, r7
 8003a0e:	210f      	movs	r1, #15
 8003a10:	438a      	bics	r2, r1
 8003a12:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2207      	movs	r2, #7
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	b299      	uxth	r1, r3
 8003a20:	1903      	adds	r3, r0, r4
 8003a22:	19db      	adds	r3, r3, r7
 8003a24:	1902      	adds	r2, r0, r4
 8003a26:	19d2      	adds	r2, r2, r7
 8003a28:	8812      	ldrh	r2, [r2, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	1902      	adds	r2, r0, r4
 8003a34:	19d2      	adds	r2, r2, r7
 8003a36:	8812      	ldrh	r2, [r2, #0]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	e05d      	b.n	8003af8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3c:	231a      	movs	r3, #26
 8003a3e:	2218      	movs	r2, #24
 8003a40:	189b      	adds	r3, r3, r2
 8003a42:	19db      	adds	r3, r3, r7
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e056      	b.n	8003af8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a4a:	231b      	movs	r3, #27
 8003a4c:	2218      	movs	r2, #24
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	19db      	adds	r3, r3, r7
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d822      	bhi.n	8003a9e <UART_SetConfig+0x47e>
 8003a58:	009a      	lsls	r2, r3, #2
 8003a5a:	4b32      	ldr	r3, [pc, #200]	@ (8003b24 <UART_SetConfig+0x504>)
 8003a5c:	18d3      	adds	r3, r2, r3
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a62:	f7fe fe6f 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8003a66:	0003      	movs	r3, r0
 8003a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a6a:	e021      	b.n	8003ab0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a6c:	f7fe fe80 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8003a70:	0003      	movs	r3, r0
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a74:	e01c      	b.n	8003ab0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a76:	4b28      	ldr	r3, [pc, #160]	@ (8003b18 <UART_SetConfig+0x4f8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d002      	beq.n	8003a86 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a80:	4b26      	ldr	r3, [pc, #152]	@ (8003b1c <UART_SetConfig+0x4fc>)
 8003a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a84:	e014      	b.n	8003ab0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003a86:	4b26      	ldr	r3, [pc, #152]	@ (8003b20 <UART_SetConfig+0x500>)
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a8a:	e011      	b.n	8003ab0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8c:	f7fe fdaa 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8003a90:	0003      	movs	r3, r0
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a94:	e00c      	b.n	8003ab0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a9c:	e008      	b.n	8003ab0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003aa2:	231a      	movs	r3, #26
 8003aa4:	2218      	movs	r2, #24
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	19db      	adds	r3, r3, r7
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
        break;
 8003aae:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d020      	beq.n	8003af8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	085a      	lsrs	r2, r3, #1
 8003abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003abe:	18d2      	adds	r2, r2, r3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	0010      	movs	r0, r2
 8003ac8:	f7fc fb1e 	bl	8000108 <__udivsi3>
 8003acc:	0003      	movs	r3, r0
 8003ace:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	2b0f      	cmp	r3, #15
 8003ad4:	d90a      	bls.n	8003aec <UART_SetConfig+0x4cc>
 8003ad6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	025b      	lsls	r3, r3, #9
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d205      	bcs.n	8003aec <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	e005      	b.n	8003af8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003aec:	231a      	movs	r3, #26
 8003aee:	2218      	movs	r2, #24
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	19db      	adds	r3, r3, r7
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2200      	movs	r2, #0
 8003afc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	2200      	movs	r2, #0
 8003b02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b04:	231a      	movs	r3, #26
 8003b06:	2218      	movs	r2, #24
 8003b08:	189b      	adds	r3, r3, r2
 8003b0a:	19db      	adds	r3, r3, r7
 8003b0c:	781b      	ldrb	r3, [r3, #0]
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b00e      	add	sp, #56	@ 0x38
 8003b14:	bdb0      	pop	{r4, r5, r7, pc}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	003d0900 	.word	0x003d0900
 8003b20:	00f42400 	.word	0x00f42400
 8003b24:	080040c8 	.word	0x080040c8

08003b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	d00b      	beq.n	8003b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a4a      	ldr	r2, [pc, #296]	@ (8003c6c <UART_AdvFeatureConfig+0x144>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	0019      	movs	r1, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	2202      	movs	r2, #2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4a43      	ldr	r2, [pc, #268]	@ (8003c70 <UART_AdvFeatureConfig+0x148>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	0019      	movs	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	2204      	movs	r2, #4
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a3b      	ldr	r2, [pc, #236]	@ (8003c74 <UART_AdvFeatureConfig+0x14c>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	0019      	movs	r1, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4a34      	ldr	r2, [pc, #208]	@ (8003c78 <UART_AdvFeatureConfig+0x150>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8003c7c <UART_AdvFeatureConfig+0x154>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	2220      	movs	r2, #32
 8003be0:	4013      	ands	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	4a25      	ldr	r2, [pc, #148]	@ (8003c80 <UART_AdvFeatureConfig+0x158>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	2240      	movs	r2, #64	@ 0x40
 8003c02:	4013      	ands	r3, r2
 8003c04:	d01d      	beq.n	8003c42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c84 <UART_AdvFeatureConfig+0x15c>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	035b      	lsls	r3, r3, #13
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d10b      	bne.n	8003c42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a15      	ldr	r2, [pc, #84]	@ (8003c88 <UART_AdvFeatureConfig+0x160>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	2280      	movs	r2, #128	@ 0x80
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a0e      	ldr	r2, [pc, #56]	@ (8003c8c <UART_AdvFeatureConfig+0x164>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	fffdffff 	.word	0xfffdffff
 8003c70:	fffeffff 	.word	0xfffeffff
 8003c74:	fffbffff 	.word	0xfffbffff
 8003c78:	ffff7fff 	.word	0xffff7fff
 8003c7c:	ffffefff 	.word	0xffffefff
 8003c80:	ffffdfff 	.word	0xffffdfff
 8003c84:	ffefffff 	.word	0xffefffff
 8003c88:	ff9fffff 	.word	0xff9fffff
 8003c8c:	fff7ffff 	.word	0xfff7ffff

08003c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b092      	sub	sp, #72	@ 0x48
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2284      	movs	r2, #132	@ 0x84
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca0:	f7fd f9a2 	bl	8000fe8 <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2208      	movs	r2, #8
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d12c      	bne.n	8003d10 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb8:	2280      	movs	r2, #128	@ 0x80
 8003cba:	0391      	lsls	r1, r2, #14
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4a46      	ldr	r2, [pc, #280]	@ (8003dd8 <UART_CheckIdleState+0x148>)
 8003cc0:	9200      	str	r2, [sp, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f000 f88c 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d021      	beq.n	8003d10 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	46c0      	nop			@ (mov r8, r8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2180      	movs	r1, #128	@ 0x80
 8003cee:	438a      	bics	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf8:	f383 8810 	msr	PRIMASK, r3
}
 8003cfc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2278      	movs	r2, #120	@ 0x78
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e05f      	b.n	8003dd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2204      	movs	r2, #4
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d146      	bne.n	8003dac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d20:	2280      	movs	r2, #128	@ 0x80
 8003d22:	03d1      	lsls	r1, r2, #15
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd8 <UART_CheckIdleState+0x148>)
 8003d28:	9200      	str	r2, [sp, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f000 f858 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d03b      	beq.n	8003dac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d34:	f3ef 8310 	mrs	r3, PRIMASK
 8003d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d3e:	2301      	movs	r3, #1
 8003d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			@ (mov r8, r8)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4921      	ldr	r1, [pc, #132]	@ (8003ddc <UART_CheckIdleState+0x14c>)
 8003d56:	400a      	ands	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d66:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d6c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d70:	2301      	movs	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f383 8810 	msr	PRIMASK, r3
}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2101      	movs	r1, #1
 8003d88:	438a      	bics	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	f383 8810 	msr	PRIMASK, r3
}
 8003d96:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2280      	movs	r2, #128	@ 0x80
 8003d9c:	2120      	movs	r1, #32
 8003d9e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2278      	movs	r2, #120	@ 0x78
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e011      	b.n	8003dd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2280      	movs	r2, #128	@ 0x80
 8003db6:	2120      	movs	r1, #32
 8003db8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2278      	movs	r2, #120	@ 0x78
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b010      	add	sp, #64	@ 0x40
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	01ffffff 	.word	0x01ffffff
 8003ddc:	fffffedf 	.word	0xfffffedf

08003de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df0:	e04b      	b.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	3301      	adds	r3, #1
 8003df6:	d048      	beq.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df8:	f7fd f8f6 	bl	8000fe8 <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04b      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d035      	beq.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	2208      	movs	r2, #8
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d111      	bne.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2208      	movs	r2, #8
 8003e32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 f83c 	bl	8003eb4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2284      	movs	r2, #132	@ 0x84
 8003e40:	2108      	movs	r1, #8
 8003e42:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2278      	movs	r2, #120	@ 0x78
 8003e48:	2100      	movs	r1, #0
 8003e4a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e02c      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d112      	bne.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2280      	movs	r2, #128	@ 0x80
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 f81f 	bl	8003eb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2284      	movs	r2, #132	@ 0x84
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2278      	movs	r2, #120	@ 0x78
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e00f      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	425a      	negs	r2, r3
 8003e9a:	4153      	adcs	r3, r2
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d0a4      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	0018      	movs	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b004      	add	sp, #16
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08e      	sub	sp, #56	@ 0x38
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ec2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f383 8810 	msr	PRIMASK, r3
}
 8003ed0:	46c0      	nop			@ (mov r8, r8)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4926      	ldr	r1, [pc, #152]	@ (8003f78 <UART_EndRxTransfer+0xc4>)
 8003ede:	400a      	ands	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f383 8810 	msr	PRIMASK, r3
}
 8003eec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef2:	623b      	str	r3, [r7, #32]
  return(result);
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef8:	2301      	movs	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	f383 8810 	msr	PRIMASK, r3
}
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	438a      	bics	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	f383 8810 	msr	PRIMASK, r3
}
 8003f1e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d118      	bne.n	8003f5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f28:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f32:	2301      	movs	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f383 8810 	msr	PRIMASK, r3
}
 8003f3c:	46c0      	nop			@ (mov r8, r8)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2110      	movs	r1, #16
 8003f4a:	438a      	bics	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2280      	movs	r2, #128	@ 0x80
 8003f5e:	2120      	movs	r1, #32
 8003f60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b00e      	add	sp, #56	@ 0x38
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	fffffedf 	.word	0xfffffedf

08003f7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	225a      	movs	r2, #90	@ 0x5a
 8003f8e:	2100      	movs	r1, #0
 8003f90:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2252      	movs	r2, #82	@ 0x52
 8003f96:	2100      	movs	r1, #0
 8003f98:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff fb2b 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b004      	add	sp, #16
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2140      	movs	r1, #64	@ 0x40
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f7ff faf8 	bl	80035e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b006      	add	sp, #24
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004008:	46c0      	nop			@ (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <memset>:
 8004010:	0003      	movs	r3, r0
 8004012:	1882      	adds	r2, r0, r2
 8004014:	4293      	cmp	r3, r2
 8004016:	d100      	bne.n	800401a <memset+0xa>
 8004018:	4770      	bx	lr
 800401a:	7019      	strb	r1, [r3, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	e7f9      	b.n	8004014 <memset+0x4>

08004020 <__libc_init_array>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	2600      	movs	r6, #0
 8004024:	4c0c      	ldr	r4, [pc, #48]	@ (8004058 <__libc_init_array+0x38>)
 8004026:	4d0d      	ldr	r5, [pc, #52]	@ (800405c <__libc_init_array+0x3c>)
 8004028:	1b64      	subs	r4, r4, r5
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	42a6      	cmp	r6, r4
 800402e:	d109      	bne.n	8004044 <__libc_init_array+0x24>
 8004030:	2600      	movs	r6, #0
 8004032:	f000 f819 	bl	8004068 <_init>
 8004036:	4c0a      	ldr	r4, [pc, #40]	@ (8004060 <__libc_init_array+0x40>)
 8004038:	4d0a      	ldr	r5, [pc, #40]	@ (8004064 <__libc_init_array+0x44>)
 800403a:	1b64      	subs	r4, r4, r5
 800403c:	10a4      	asrs	r4, r4, #2
 800403e:	42a6      	cmp	r6, r4
 8004040:	d105      	bne.n	800404e <__libc_init_array+0x2e>
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	00b3      	lsls	r3, r6, #2
 8004046:	58eb      	ldr	r3, [r5, r3]
 8004048:	4798      	blx	r3
 800404a:	3601      	adds	r6, #1
 800404c:	e7ee      	b.n	800402c <__libc_init_array+0xc>
 800404e:	00b3      	lsls	r3, r6, #2
 8004050:	58eb      	ldr	r3, [r5, r3]
 8004052:	4798      	blx	r3
 8004054:	3601      	adds	r6, #1
 8004056:	e7f2      	b.n	800403e <__libc_init_array+0x1e>
 8004058:	080040f4 	.word	0x080040f4
 800405c:	080040f4 	.word	0x080040f4
 8004060:	080040f8 	.word	0x080040f8
 8004064:	080040f4 	.word	0x080040f4

08004068 <_init>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406e:	bc08      	pop	{r3}
 8004070:	469e      	mov	lr, r3
 8004072:	4770      	bx	lr

08004074 <_fini>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407a:	bc08      	pop	{r3}
 800407c:	469e      	mov	lr, r3
 800407e:	4770      	bx	lr
